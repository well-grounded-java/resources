// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$2 {

    static final FunctionDescriptor _OSSwapInt16$FUNC = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final MethodHandle _OSSwapInt16$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "_OSSwapInt16",
        "(S)S",
        constants$2._OSSwapInt16$FUNC, false
    );
    static final FunctionDescriptor _OSSwapInt32$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle _OSSwapInt32$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "_OSSwapInt32",
        "(I)I",
        constants$2._OSSwapInt32$FUNC, false
    );
    static final FunctionDescriptor _OSSwapInt64$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_LONG_LONG
    );
    static final MethodHandle _OSSwapInt64$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "_OSSwapInt64",
        "(J)J",
        constants$2._OSSwapInt64$FUNC, false
    );
    static final FunctionDescriptor wait$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle wait$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "wait",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$2.wait$FUNC, false
    );
    static final FunctionDescriptor waitpid$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle waitpid$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "waitpid",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$2.waitpid$FUNC, false
    );
    static final FunctionDescriptor waitid$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle waitid$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "waitid",
        "(IILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$2.waitid$FUNC, false
    );
}


