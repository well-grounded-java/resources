// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_ihdr {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("width"),
        C_INT.withName("height"),
        C_CHAR.withName("bit_depth"),
        C_CHAR.withName("color_type"),
        C_CHAR.withName("compression_method"),
        C_CHAR.withName("filter_method"),
        C_CHAR.withName("interlace_method"),
        MemoryLayout.paddingLayout(24)
    ).withName("spng_ihdr");
    public static MemoryLayout $LAYOUT() {
        return spng_ihdr.$struct$LAYOUT;
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return spng_ihdr.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)spng_ihdr.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        spng_ihdr.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)spng_ihdr.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        spng_ihdr.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return spng_ihdr.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)spng_ihdr.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        spng_ihdr.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)spng_ihdr.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        spng_ihdr.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bit_depth$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bit_depth"));
    public static VarHandle bit_depth$VH() {
        return spng_ihdr.bit_depth$VH;
    }
    public static byte bit_depth$get(MemorySegment seg) {
        return (byte)spng_ihdr.bit_depth$VH.get(seg);
    }
    public static void bit_depth$set( MemorySegment seg, byte x) {
        spng_ihdr.bit_depth$VH.set(seg, x);
    }
    public static byte bit_depth$get(MemorySegment seg, long index) {
        return (byte)spng_ihdr.bit_depth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_depth$set(MemorySegment seg, long index, byte x) {
        spng_ihdr.bit_depth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_type$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("color_type"));
    public static VarHandle color_type$VH() {
        return spng_ihdr.color_type$VH;
    }
    public static byte color_type$get(MemorySegment seg) {
        return (byte)spng_ihdr.color_type$VH.get(seg);
    }
    public static void color_type$set( MemorySegment seg, byte x) {
        spng_ihdr.color_type$VH.set(seg, x);
    }
    public static byte color_type$get(MemorySegment seg, long index) {
        return (byte)spng_ihdr.color_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_type$set(MemorySegment seg, long index, byte x) {
        spng_ihdr.color_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle compression_method$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("compression_method"));
    public static VarHandle compression_method$VH() {
        return spng_ihdr.compression_method$VH;
    }
    public static byte compression_method$get(MemorySegment seg) {
        return (byte)spng_ihdr.compression_method$VH.get(seg);
    }
    public static void compression_method$set( MemorySegment seg, byte x) {
        spng_ihdr.compression_method$VH.set(seg, x);
    }
    public static byte compression_method$get(MemorySegment seg, long index) {
        return (byte)spng_ihdr.compression_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compression_method$set(MemorySegment seg, long index, byte x) {
        spng_ihdr.compression_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filter_method$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("filter_method"));
    public static VarHandle filter_method$VH() {
        return spng_ihdr.filter_method$VH;
    }
    public static byte filter_method$get(MemorySegment seg) {
        return (byte)spng_ihdr.filter_method$VH.get(seg);
    }
    public static void filter_method$set( MemorySegment seg, byte x) {
        spng_ihdr.filter_method$VH.set(seg, x);
    }
    public static byte filter_method$get(MemorySegment seg, long index) {
        return (byte)spng_ihdr.filter_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_method$set(MemorySegment seg, long index, byte x) {
        spng_ihdr.filter_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle interlace_method$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("interlace_method"));
    public static VarHandle interlace_method$VH() {
        return spng_ihdr.interlace_method$VH;
    }
    public static byte interlace_method$get(MemorySegment seg) {
        return (byte)spng_ihdr.interlace_method$VH.get(seg);
    }
    public static void interlace_method$set( MemorySegment seg, byte x) {
        spng_ihdr.interlace_method$VH.set(seg, x);
    }
    public static byte interlace_method$get(MemorySegment seg, long index) {
        return (byte)spng_ihdr.interlace_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interlace_method$set(MemorySegment seg, long index, byte x) {
        spng_ihdr.interlace_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


