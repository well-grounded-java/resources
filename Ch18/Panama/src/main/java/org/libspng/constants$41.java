// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$41 {

    static final FunctionDescriptor fmtcheck$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle fmtcheck$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "fmtcheck",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$41.fmtcheck$FUNC, false
    );
    static final FunctionDescriptor fpurge$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle fpurge$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "fpurge",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$41.fpurge$FUNC, false
    );
    static final FunctionDescriptor setbuffer$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle setbuffer$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "setbuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$41.setbuffer$FUNC, false
    );
    static final FunctionDescriptor setlinebuf$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle setlinebuf$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "setlinebuf",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$41.setlinebuf$FUNC, false
    );
    static final FunctionDescriptor vasprintf$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle vasprintf$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "vasprintf",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$41.vasprintf$FUNC, false
    );
    static final FunctionDescriptor funopen$x0$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
}


