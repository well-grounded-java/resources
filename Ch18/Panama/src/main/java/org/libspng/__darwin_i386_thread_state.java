// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __darwin_i386_thread_state {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("__eax"),
        C_INT.withName("__ebx"),
        C_INT.withName("__ecx"),
        C_INT.withName("__edx"),
        C_INT.withName("__edi"),
        C_INT.withName("__esi"),
        C_INT.withName("__ebp"),
        C_INT.withName("__esp"),
        C_INT.withName("__ss"),
        C_INT.withName("__eflags"),
        C_INT.withName("__eip"),
        C_INT.withName("__cs"),
        C_INT.withName("__ds"),
        C_INT.withName("__es"),
        C_INT.withName("__fs"),
        C_INT.withName("__gs")
    ).withName("__darwin_i386_thread_state");
    public static MemoryLayout $LAYOUT() {
        return __darwin_i386_thread_state.$struct$LAYOUT;
    }
    static final VarHandle __eax$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__eax"));
    public static VarHandle __eax$VH() {
        return __darwin_i386_thread_state.__eax$VH;
    }
    public static int __eax$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__eax$VH.get(seg);
    }
    public static void __eax$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__eax$VH.set(seg, x);
    }
    public static int __eax$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__eax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __eax$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__eax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ebx$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__ebx"));
    public static VarHandle __ebx$VH() {
        return __darwin_i386_thread_state.__ebx$VH;
    }
    public static int __ebx$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__ebx$VH.get(seg);
    }
    public static void __ebx$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__ebx$VH.set(seg, x);
    }
    public static int __ebx$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__ebx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ebx$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__ebx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ecx$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__ecx"));
    public static VarHandle __ecx$VH() {
        return __darwin_i386_thread_state.__ecx$VH;
    }
    public static int __ecx$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__ecx$VH.get(seg);
    }
    public static void __ecx$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__ecx$VH.set(seg, x);
    }
    public static int __ecx$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__ecx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ecx$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__ecx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __edx$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__edx"));
    public static VarHandle __edx$VH() {
        return __darwin_i386_thread_state.__edx$VH;
    }
    public static int __edx$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__edx$VH.get(seg);
    }
    public static void __edx$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__edx$VH.set(seg, x);
    }
    public static int __edx$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__edx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __edx$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__edx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __edi$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__edi"));
    public static VarHandle __edi$VH() {
        return __darwin_i386_thread_state.__edi$VH;
    }
    public static int __edi$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__edi$VH.get(seg);
    }
    public static void __edi$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__edi$VH.set(seg, x);
    }
    public static int __edi$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__edi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __edi$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__edi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __esi$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__esi"));
    public static VarHandle __esi$VH() {
        return __darwin_i386_thread_state.__esi$VH;
    }
    public static int __esi$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__esi$VH.get(seg);
    }
    public static void __esi$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__esi$VH.set(seg, x);
    }
    public static int __esi$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__esi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __esi$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__esi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ebp$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__ebp"));
    public static VarHandle __ebp$VH() {
        return __darwin_i386_thread_state.__ebp$VH;
    }
    public static int __ebp$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__ebp$VH.get(seg);
    }
    public static void __ebp$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__ebp$VH.set(seg, x);
    }
    public static int __ebp$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__ebp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ebp$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__ebp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __esp$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__esp"));
    public static VarHandle __esp$VH() {
        return __darwin_i386_thread_state.__esp$VH;
    }
    public static int __esp$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__esp$VH.get(seg);
    }
    public static void __esp$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__esp$VH.set(seg, x);
    }
    public static int __esp$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__esp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __esp$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__esp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ss$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__ss"));
    public static VarHandle __ss$VH() {
        return __darwin_i386_thread_state.__ss$VH;
    }
    public static int __ss$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__ss$VH.get(seg);
    }
    public static void __ss$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__ss$VH.set(seg, x);
    }
    public static int __ss$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__ss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ss$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__ss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __eflags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__eflags"));
    public static VarHandle __eflags$VH() {
        return __darwin_i386_thread_state.__eflags$VH;
    }
    public static int __eflags$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__eflags$VH.get(seg);
    }
    public static void __eflags$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__eflags$VH.set(seg, x);
    }
    public static int __eflags$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__eflags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __eflags$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__eflags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __eip$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__eip"));
    public static VarHandle __eip$VH() {
        return __darwin_i386_thread_state.__eip$VH;
    }
    public static int __eip$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__eip$VH.get(seg);
    }
    public static void __eip$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__eip$VH.set(seg, x);
    }
    public static int __eip$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__eip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __eip$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__eip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __cs$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__cs"));
    public static VarHandle __cs$VH() {
        return __darwin_i386_thread_state.__cs$VH;
    }
    public static int __cs$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__cs$VH.get(seg);
    }
    public static void __cs$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__cs$VH.set(seg, x);
    }
    public static int __cs$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__cs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __cs$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__cs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ds$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__ds"));
    public static VarHandle __ds$VH() {
        return __darwin_i386_thread_state.__ds$VH;
    }
    public static int __ds$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__ds$VH.get(seg);
    }
    public static void __ds$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__ds$VH.set(seg, x);
    }
    public static int __ds$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__ds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ds$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__ds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __es$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__es"));
    public static VarHandle __es$VH() {
        return __darwin_i386_thread_state.__es$VH;
    }
    public static int __es$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__es$VH.get(seg);
    }
    public static void __es$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__es$VH.set(seg, x);
    }
    public static int __es$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__es$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __es$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__es$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __fs$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__fs"));
    public static VarHandle __fs$VH() {
        return __darwin_i386_thread_state.__fs$VH;
    }
    public static int __fs$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__fs$VH.get(seg);
    }
    public static void __fs$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__fs$VH.set(seg, x);
    }
    public static int __fs$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__fs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __fs$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__fs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __gs$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__gs"));
    public static VarHandle __gs$VH() {
        return __darwin_i386_thread_state.__gs$VH;
    }
    public static int __gs$get(MemorySegment seg) {
        return (int)__darwin_i386_thread_state.__gs$VH.get(seg);
    }
    public static void __gs$set( MemorySegment seg, int x) {
        __darwin_i386_thread_state.__gs$VH.set(seg, x);
    }
    public static int __gs$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_thread_state.__gs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __gs$set(MemorySegment seg, long index, int x) {
        __darwin_i386_thread_state.__gs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


