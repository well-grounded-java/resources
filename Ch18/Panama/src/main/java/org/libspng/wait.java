// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class wait {

    static final MemoryLayout $union$LAYOUT = MemoryLayout.unionLayout(
        C_INT.withName("w_status"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(7, ByteOrder.nativeOrder()).withName("w_Termsig"),
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("w_Coredump"),
                MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("w_Retcode"),
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("w_Filler")
            )
        ).withName("w_T"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("w_Stopval"),
                MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("w_Stopsig"),
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("w_Filler")
            )
        ).withName("w_S")
    ).withName("wait");
    public static MemoryLayout $LAYOUT() {
        return wait.$union$LAYOUT;
    }
    static final VarHandle w_status$VH = $union$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("w_status"));
    public static VarHandle w_status$VH() {
        return wait.w_status$VH;
    }
    public static int w_status$get(MemorySegment seg) {
        return (int)wait.w_status$VH.get(seg);
    }
    public static void w_status$set( MemorySegment seg, int x) {
        wait.w_status$VH.set(seg, x);
    }
    public static int w_status$get(MemorySegment seg, long index) {
        return (int)wait.w_status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void w_status$set(MemorySegment seg, long index, int x) {
        wait.w_status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class w_T {

        static final MemoryLayout w_T$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(7, ByteOrder.nativeOrder()).withName("w_Termsig"),
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("w_Coredump"),
                MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("w_Retcode"),
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("w_Filler")
            )
        );
        public static MemoryLayout $LAYOUT() {
            return w_T.w_T$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment w_T$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static class w_S {

        static final MemoryLayout w_S$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("w_Stopval"),
                MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("w_Stopsig"),
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("w_Filler")
            )
        );
        public static MemoryLayout $LAYOUT() {
            return w_S.w_S$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment w_S$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


