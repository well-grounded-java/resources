// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_trns {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("gray"),
        C_SHORT.withName("red"),
        C_SHORT.withName("green"),
        C_SHORT.withName("blue"),
        C_INT.withName("n_type3_entries"),
        MemoryLayout.sequenceLayout(256, C_CHAR).withName("type3_alpha")
    ).withName("spng_trns");
    public static MemoryLayout $LAYOUT() {
        return spng_trns.$struct$LAYOUT;
    }
    static final VarHandle gray$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("gray"));
    public static VarHandle gray$VH() {
        return spng_trns.gray$VH;
    }
    public static short gray$get(MemorySegment seg) {
        return (short)spng_trns.gray$VH.get(seg);
    }
    public static void gray$set( MemorySegment seg, short x) {
        spng_trns.gray$VH.set(seg, x);
    }
    public static short gray$get(MemorySegment seg, long index) {
        return (short)spng_trns.gray$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gray$set(MemorySegment seg, long index, short x) {
        spng_trns.gray$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("red"));
    public static VarHandle red$VH() {
        return spng_trns.red$VH;
    }
    public static short red$get(MemorySegment seg) {
        return (short)spng_trns.red$VH.get(seg);
    }
    public static void red$set( MemorySegment seg, short x) {
        spng_trns.red$VH.set(seg, x);
    }
    public static short red$get(MemorySegment seg, long index) {
        return (short)spng_trns.red$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red$set(MemorySegment seg, long index, short x) {
        spng_trns.red$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("green"));
    public static VarHandle green$VH() {
        return spng_trns.green$VH;
    }
    public static short green$get(MemorySegment seg) {
        return (short)spng_trns.green$VH.get(seg);
    }
    public static void green$set( MemorySegment seg, short x) {
        spng_trns.green$VH.set(seg, x);
    }
    public static short green$get(MemorySegment seg, long index) {
        return (short)spng_trns.green$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green$set(MemorySegment seg, long index, short x) {
        spng_trns.green$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("blue"));
    public static VarHandle blue$VH() {
        return spng_trns.blue$VH;
    }
    public static short blue$get(MemorySegment seg) {
        return (short)spng_trns.blue$VH.get(seg);
    }
    public static void blue$set( MemorySegment seg, short x) {
        spng_trns.blue$VH.set(seg, x);
    }
    public static short blue$get(MemorySegment seg, long index) {
        return (short)spng_trns.blue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue$set(MemorySegment seg, long index, short x) {
        spng_trns.blue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_type3_entries$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("n_type3_entries"));
    public static VarHandle n_type3_entries$VH() {
        return spng_trns.n_type3_entries$VH;
    }
    public static int n_type3_entries$get(MemorySegment seg) {
        return (int)spng_trns.n_type3_entries$VH.get(seg);
    }
    public static void n_type3_entries$set( MemorySegment seg, int x) {
        spng_trns.n_type3_entries$VH.set(seg, x);
    }
    public static int n_type3_entries$get(MemorySegment seg, long index) {
        return (int)spng_trns.n_type3_entries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_type3_entries$set(MemorySegment seg, long index, int x) {
        spng_trns.n_type3_entries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment type3_alpha$slice(MemorySegment seg) {
        return seg.asSlice(12, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


