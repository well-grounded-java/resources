// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_sbit {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("grayscale_bits"),
        C_CHAR.withName("red_bits"),
        C_CHAR.withName("green_bits"),
        C_CHAR.withName("blue_bits"),
        C_CHAR.withName("alpha_bits")
    ).withName("spng_sbit");
    public static MemoryLayout $LAYOUT() {
        return spng_sbit.$struct$LAYOUT;
    }
    static final VarHandle grayscale_bits$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("grayscale_bits"));
    public static VarHandle grayscale_bits$VH() {
        return spng_sbit.grayscale_bits$VH;
    }
    public static byte grayscale_bits$get(MemorySegment seg) {
        return (byte)spng_sbit.grayscale_bits$VH.get(seg);
    }
    public static void grayscale_bits$set( MemorySegment seg, byte x) {
        spng_sbit.grayscale_bits$VH.set(seg, x);
    }
    public static byte grayscale_bits$get(MemorySegment seg, long index) {
        return (byte)spng_sbit.grayscale_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grayscale_bits$set(MemorySegment seg, long index, byte x) {
        spng_sbit.grayscale_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red_bits$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("red_bits"));
    public static VarHandle red_bits$VH() {
        return spng_sbit.red_bits$VH;
    }
    public static byte red_bits$get(MemorySegment seg) {
        return (byte)spng_sbit.red_bits$VH.get(seg);
    }
    public static void red_bits$set( MemorySegment seg, byte x) {
        spng_sbit.red_bits$VH.set(seg, x);
    }
    public static byte red_bits$get(MemorySegment seg, long index) {
        return (byte)spng_sbit.red_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red_bits$set(MemorySegment seg, long index, byte x) {
        spng_sbit.red_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_bits$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("green_bits"));
    public static VarHandle green_bits$VH() {
        return spng_sbit.green_bits$VH;
    }
    public static byte green_bits$get(MemorySegment seg) {
        return (byte)spng_sbit.green_bits$VH.get(seg);
    }
    public static void green_bits$set( MemorySegment seg, byte x) {
        spng_sbit.green_bits$VH.set(seg, x);
    }
    public static byte green_bits$get(MemorySegment seg, long index) {
        return (byte)spng_sbit.green_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_bits$set(MemorySegment seg, long index, byte x) {
        spng_sbit.green_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue_bits$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("blue_bits"));
    public static VarHandle blue_bits$VH() {
        return spng_sbit.blue_bits$VH;
    }
    public static byte blue_bits$get(MemorySegment seg) {
        return (byte)spng_sbit.blue_bits$VH.get(seg);
    }
    public static void blue_bits$set( MemorySegment seg, byte x) {
        spng_sbit.blue_bits$VH.set(seg, x);
    }
    public static byte blue_bits$get(MemorySegment seg, long index) {
        return (byte)spng_sbit.blue_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_bits$set(MemorySegment seg, long index, byte x) {
        spng_sbit.blue_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle alpha_bits$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("alpha_bits"));
    public static VarHandle alpha_bits$VH() {
        return spng_sbit.alpha_bits$VH;
    }
    public static byte alpha_bits$get(MemorySegment seg) {
        return (byte)spng_sbit.alpha_bits$VH.get(seg);
    }
    public static void alpha_bits$set( MemorySegment seg, byte x) {
        spng_sbit.alpha_bits$VH.set(seg, x);
    }
    public static byte alpha_bits$get(MemorySegment seg, long index) {
        return (byte)spng_sbit.alpha_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alpha_bits$set(MemorySegment seg, long index, byte x) {
        spng_sbit.alpha_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


