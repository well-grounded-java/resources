// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class rusage {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("tv_sec"),
            C_INT.withName("tv_usec"),
            MemoryLayout.paddingLayout(32)
        ).withName("ru_utime"),
        MemoryLayout.structLayout(
            C_LONG.withName("tv_sec"),
            C_INT.withName("tv_usec"),
            MemoryLayout.paddingLayout(32)
        ).withName("ru_stime"),
        C_LONG.withName("ru_maxrss"),
        C_LONG.withName("ru_ixrss"),
        C_LONG.withName("ru_idrss"),
        C_LONG.withName("ru_isrss"),
        C_LONG.withName("ru_minflt"),
        C_LONG.withName("ru_majflt"),
        C_LONG.withName("ru_nswap"),
        C_LONG.withName("ru_inblock"),
        C_LONG.withName("ru_oublock"),
        C_LONG.withName("ru_msgsnd"),
        C_LONG.withName("ru_msgrcv"),
        C_LONG.withName("ru_nsignals"),
        C_LONG.withName("ru_nvcsw"),
        C_LONG.withName("ru_nivcsw")
    ).withName("rusage");
    public static MemoryLayout $LAYOUT() {
        return rusage.$struct$LAYOUT;
    }
    public static MemorySegment ru_utime$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment ru_stime$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle ru_maxrss$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_maxrss"));
    public static VarHandle ru_maxrss$VH() {
        return rusage.ru_maxrss$VH;
    }
    public static long ru_maxrss$get(MemorySegment seg) {
        return (long)rusage.ru_maxrss$VH.get(seg);
    }
    public static void ru_maxrss$set( MemorySegment seg, long x) {
        rusage.ru_maxrss$VH.set(seg, x);
    }
    public static long ru_maxrss$get(MemorySegment seg, long index) {
        return (long)rusage.ru_maxrss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_maxrss$set(MemorySegment seg, long index, long x) {
        rusage.ru_maxrss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_ixrss$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_ixrss"));
    public static VarHandle ru_ixrss$VH() {
        return rusage.ru_ixrss$VH;
    }
    public static long ru_ixrss$get(MemorySegment seg) {
        return (long)rusage.ru_ixrss$VH.get(seg);
    }
    public static void ru_ixrss$set( MemorySegment seg, long x) {
        rusage.ru_ixrss$VH.set(seg, x);
    }
    public static long ru_ixrss$get(MemorySegment seg, long index) {
        return (long)rusage.ru_ixrss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_ixrss$set(MemorySegment seg, long index, long x) {
        rusage.ru_ixrss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_idrss$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_idrss"));
    public static VarHandle ru_idrss$VH() {
        return rusage.ru_idrss$VH;
    }
    public static long ru_idrss$get(MemorySegment seg) {
        return (long)rusage.ru_idrss$VH.get(seg);
    }
    public static void ru_idrss$set( MemorySegment seg, long x) {
        rusage.ru_idrss$VH.set(seg, x);
    }
    public static long ru_idrss$get(MemorySegment seg, long index) {
        return (long)rusage.ru_idrss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_idrss$set(MemorySegment seg, long index, long x) {
        rusage.ru_idrss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_isrss$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_isrss"));
    public static VarHandle ru_isrss$VH() {
        return rusage.ru_isrss$VH;
    }
    public static long ru_isrss$get(MemorySegment seg) {
        return (long)rusage.ru_isrss$VH.get(seg);
    }
    public static void ru_isrss$set( MemorySegment seg, long x) {
        rusage.ru_isrss$VH.set(seg, x);
    }
    public static long ru_isrss$get(MemorySegment seg, long index) {
        return (long)rusage.ru_isrss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_isrss$set(MemorySegment seg, long index, long x) {
        rusage.ru_isrss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_minflt$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_minflt"));
    public static VarHandle ru_minflt$VH() {
        return rusage.ru_minflt$VH;
    }
    public static long ru_minflt$get(MemorySegment seg) {
        return (long)rusage.ru_minflt$VH.get(seg);
    }
    public static void ru_minflt$set( MemorySegment seg, long x) {
        rusage.ru_minflt$VH.set(seg, x);
    }
    public static long ru_minflt$get(MemorySegment seg, long index) {
        return (long)rusage.ru_minflt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_minflt$set(MemorySegment seg, long index, long x) {
        rusage.ru_minflt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_majflt$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_majflt"));
    public static VarHandle ru_majflt$VH() {
        return rusage.ru_majflt$VH;
    }
    public static long ru_majflt$get(MemorySegment seg) {
        return (long)rusage.ru_majflt$VH.get(seg);
    }
    public static void ru_majflt$set( MemorySegment seg, long x) {
        rusage.ru_majflt$VH.set(seg, x);
    }
    public static long ru_majflt$get(MemorySegment seg, long index) {
        return (long)rusage.ru_majflt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_majflt$set(MemorySegment seg, long index, long x) {
        rusage.ru_majflt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_nswap$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_nswap"));
    public static VarHandle ru_nswap$VH() {
        return rusage.ru_nswap$VH;
    }
    public static long ru_nswap$get(MemorySegment seg) {
        return (long)rusage.ru_nswap$VH.get(seg);
    }
    public static void ru_nswap$set( MemorySegment seg, long x) {
        rusage.ru_nswap$VH.set(seg, x);
    }
    public static long ru_nswap$get(MemorySegment seg, long index) {
        return (long)rusage.ru_nswap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_nswap$set(MemorySegment seg, long index, long x) {
        rusage.ru_nswap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_inblock$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_inblock"));
    public static VarHandle ru_inblock$VH() {
        return rusage.ru_inblock$VH;
    }
    public static long ru_inblock$get(MemorySegment seg) {
        return (long)rusage.ru_inblock$VH.get(seg);
    }
    public static void ru_inblock$set( MemorySegment seg, long x) {
        rusage.ru_inblock$VH.set(seg, x);
    }
    public static long ru_inblock$get(MemorySegment seg, long index) {
        return (long)rusage.ru_inblock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_inblock$set(MemorySegment seg, long index, long x) {
        rusage.ru_inblock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_oublock$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_oublock"));
    public static VarHandle ru_oublock$VH() {
        return rusage.ru_oublock$VH;
    }
    public static long ru_oublock$get(MemorySegment seg) {
        return (long)rusage.ru_oublock$VH.get(seg);
    }
    public static void ru_oublock$set( MemorySegment seg, long x) {
        rusage.ru_oublock$VH.set(seg, x);
    }
    public static long ru_oublock$get(MemorySegment seg, long index) {
        return (long)rusage.ru_oublock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_oublock$set(MemorySegment seg, long index, long x) {
        rusage.ru_oublock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_msgsnd$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_msgsnd"));
    public static VarHandle ru_msgsnd$VH() {
        return rusage.ru_msgsnd$VH;
    }
    public static long ru_msgsnd$get(MemorySegment seg) {
        return (long)rusage.ru_msgsnd$VH.get(seg);
    }
    public static void ru_msgsnd$set( MemorySegment seg, long x) {
        rusage.ru_msgsnd$VH.set(seg, x);
    }
    public static long ru_msgsnd$get(MemorySegment seg, long index) {
        return (long)rusage.ru_msgsnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_msgsnd$set(MemorySegment seg, long index, long x) {
        rusage.ru_msgsnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_msgrcv$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_msgrcv"));
    public static VarHandle ru_msgrcv$VH() {
        return rusage.ru_msgrcv$VH;
    }
    public static long ru_msgrcv$get(MemorySegment seg) {
        return (long)rusage.ru_msgrcv$VH.get(seg);
    }
    public static void ru_msgrcv$set( MemorySegment seg, long x) {
        rusage.ru_msgrcv$VH.set(seg, x);
    }
    public static long ru_msgrcv$get(MemorySegment seg, long index) {
        return (long)rusage.ru_msgrcv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_msgrcv$set(MemorySegment seg, long index, long x) {
        rusage.ru_msgrcv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_nsignals$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_nsignals"));
    public static VarHandle ru_nsignals$VH() {
        return rusage.ru_nsignals$VH;
    }
    public static long ru_nsignals$get(MemorySegment seg) {
        return (long)rusage.ru_nsignals$VH.get(seg);
    }
    public static void ru_nsignals$set( MemorySegment seg, long x) {
        rusage.ru_nsignals$VH.set(seg, x);
    }
    public static long ru_nsignals$get(MemorySegment seg, long index) {
        return (long)rusage.ru_nsignals$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_nsignals$set(MemorySegment seg, long index, long x) {
        rusage.ru_nsignals$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_nvcsw$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_nvcsw"));
    public static VarHandle ru_nvcsw$VH() {
        return rusage.ru_nvcsw$VH;
    }
    public static long ru_nvcsw$get(MemorySegment seg) {
        return (long)rusage.ru_nvcsw$VH.get(seg);
    }
    public static void ru_nvcsw$set( MemorySegment seg, long x) {
        rusage.ru_nvcsw$VH.set(seg, x);
    }
    public static long ru_nvcsw$get(MemorySegment seg, long index) {
        return (long)rusage.ru_nvcsw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_nvcsw$set(MemorySegment seg, long index, long x) {
        rusage.ru_nvcsw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ru_nivcsw$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ru_nivcsw"));
    public static VarHandle ru_nivcsw$VH() {
        return rusage.ru_nivcsw$VH;
    }
    public static long ru_nivcsw$get(MemorySegment seg) {
        return (long)rusage.ru_nivcsw$VH.get(seg);
    }
    public static void ru_nivcsw$set( MemorySegment seg, long x) {
        rusage.ru_nivcsw$VH.set(seg, x);
    }
    public static long ru_nivcsw$get(MemorySegment seg, long index) {
        return (long)rusage.ru_nivcsw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ru_nivcsw$set(MemorySegment seg, long index, long x) {
        rusage.ru_nivcsw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


