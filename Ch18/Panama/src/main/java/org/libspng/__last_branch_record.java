// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __last_branch_record {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("__from_ip"),
        C_LONG_LONG.withName("__to_ip"),
        MemoryLayout.structLayout(
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__mispredict"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__tsx_abort"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__in_tsx"),
            MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("__cycle_count"),
            MemoryLayout.valueLayout(13, ByteOrder.nativeOrder()).withName("__reserved"),
            MemoryLayout.paddingLayout(32)
        )
    ).withName("__last_branch_record");
    public static MemoryLayout $LAYOUT() {
        return __last_branch_record.$struct$LAYOUT;
    }
    static final VarHandle __from_ip$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__from_ip"));
    public static VarHandle __from_ip$VH() {
        return __last_branch_record.__from_ip$VH;
    }
    public static long __from_ip$get(MemorySegment seg) {
        return (long)__last_branch_record.__from_ip$VH.get(seg);
    }
    public static void __from_ip$set( MemorySegment seg, long x) {
        __last_branch_record.__from_ip$VH.set(seg, x);
    }
    public static long __from_ip$get(MemorySegment seg, long index) {
        return (long)__last_branch_record.__from_ip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __from_ip$set(MemorySegment seg, long index, long x) {
        __last_branch_record.__from_ip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __to_ip$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__to_ip"));
    public static VarHandle __to_ip$VH() {
        return __last_branch_record.__to_ip$VH;
    }
    public static long __to_ip$get(MemorySegment seg) {
        return (long)__last_branch_record.__to_ip$VH.get(seg);
    }
    public static void __to_ip$set( MemorySegment seg, long x) {
        __last_branch_record.__to_ip$VH.set(seg, x);
    }
    public static long __to_ip$get(MemorySegment seg, long index) {
        return (long)__last_branch_record.__to_ip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __to_ip$set(MemorySegment seg, long index, long x) {
        __last_branch_record.__to_ip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


