// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __last_branch_state {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("__lbr_count"),
        MemoryLayout.structLayout(
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__lbr_supported_tsx"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__lbr_supported_cycle_count"),
            MemoryLayout.valueLayout(30, ByteOrder.nativeOrder()).withName("__reserved")
        ),
        MemoryLayout.sequenceLayout(32, MemoryLayout.structLayout(
            C_LONG_LONG.withName("__from_ip"),
            C_LONG_LONG.withName("__to_ip"),
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__mispredict"),
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__tsx_abort"),
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("__in_tsx"),
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("__cycle_count"),
                MemoryLayout.valueLayout(13, ByteOrder.nativeOrder()).withName("__reserved"),
                MemoryLayout.paddingLayout(32)
            )
        ).withName("__last_branch_record")).withName("__lbrs")
    ).withName("__last_branch_state");
    public static MemoryLayout $LAYOUT() {
        return __last_branch_state.$struct$LAYOUT;
    }
    static final VarHandle __lbr_count$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__lbr_count"));
    public static VarHandle __lbr_count$VH() {
        return __last_branch_state.__lbr_count$VH;
    }
    public static int __lbr_count$get(MemorySegment seg) {
        return (int)__last_branch_state.__lbr_count$VH.get(seg);
    }
    public static void __lbr_count$set( MemorySegment seg, int x) {
        __last_branch_state.__lbr_count$VH.set(seg, x);
    }
    public static int __lbr_count$get(MemorySegment seg, long index) {
        return (int)__last_branch_state.__lbr_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __lbr_count$set(MemorySegment seg, long index, int x) {
        __last_branch_state.__lbr_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment __lbrs$slice(MemorySegment seg) {
        return seg.asSlice(8, 768);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


