// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_plte {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("n_entries"),
        MemoryLayout.sequenceLayout(256, MemoryLayout.structLayout(
            C_CHAR.withName("red"),
            C_CHAR.withName("green"),
            C_CHAR.withName("blue"),
            C_CHAR.withName("alpha")
        ).withName("spng_plte_entry")).withName("entries")
    ).withName("spng_plte");
    public static MemoryLayout $LAYOUT() {
        return spng_plte.$struct$LAYOUT;
    }
    static final VarHandle n_entries$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("n_entries"));
    public static VarHandle n_entries$VH() {
        return spng_plte.n_entries$VH;
    }
    public static int n_entries$get(MemorySegment seg) {
        return (int)spng_plte.n_entries$VH.get(seg);
    }
    public static void n_entries$set( MemorySegment seg, int x) {
        spng_plte.n_entries$VH.set(seg, x);
    }
    public static int n_entries$get(MemorySegment seg, long index) {
        return (int)spng_plte.n_entries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_entries$set(MemorySegment seg, long index, int x) {
        spng_plte.n_entries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment entries$slice(MemorySegment seg) {
        return seg.asSlice(4, 1024);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


