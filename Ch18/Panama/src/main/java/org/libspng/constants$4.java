// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$4 {

    static final FunctionDescriptor free$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle free$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "free",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$4.free$FUNC, false
    );
    static final FunctionDescriptor realloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle realloc$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "realloc",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.realloc$FUNC, false
    );
    static final FunctionDescriptor valloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final MethodHandle valloc$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "valloc",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.valloc$FUNC, false
    );
    static final FunctionDescriptor aligned_alloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle aligned_alloc$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "aligned_alloc",
        "(JJ)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.aligned_alloc$FUNC, false
    );
    static final FunctionDescriptor posix_memalign$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle posix_memalign$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "posix_memalign",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)I",
        constants$4.posix_memalign$FUNC, false
    );
    static final FunctionDescriptor abort$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle abort$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "abort",
        "()V",
        constants$4.abort$FUNC, false
    );
}


