// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_chrm {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_DOUBLE.withName("white_point_x"),
        C_DOUBLE.withName("white_point_y"),
        C_DOUBLE.withName("red_x"),
        C_DOUBLE.withName("red_y"),
        C_DOUBLE.withName("green_x"),
        C_DOUBLE.withName("green_y"),
        C_DOUBLE.withName("blue_x"),
        C_DOUBLE.withName("blue_y")
    ).withName("spng_chrm");
    public static MemoryLayout $LAYOUT() {
        return spng_chrm.$struct$LAYOUT;
    }
    static final VarHandle white_point_x$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("white_point_x"));
    public static VarHandle white_point_x$VH() {
        return spng_chrm.white_point_x$VH;
    }
    public static double white_point_x$get(MemorySegment seg) {
        return (double)spng_chrm.white_point_x$VH.get(seg);
    }
    public static void white_point_x$set( MemorySegment seg, double x) {
        spng_chrm.white_point_x$VH.set(seg, x);
    }
    public static double white_point_x$get(MemorySegment seg, long index) {
        return (double)spng_chrm.white_point_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void white_point_x$set(MemorySegment seg, long index, double x) {
        spng_chrm.white_point_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle white_point_y$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("white_point_y"));
    public static VarHandle white_point_y$VH() {
        return spng_chrm.white_point_y$VH;
    }
    public static double white_point_y$get(MemorySegment seg) {
        return (double)spng_chrm.white_point_y$VH.get(seg);
    }
    public static void white_point_y$set( MemorySegment seg, double x) {
        spng_chrm.white_point_y$VH.set(seg, x);
    }
    public static double white_point_y$get(MemorySegment seg, long index) {
        return (double)spng_chrm.white_point_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void white_point_y$set(MemorySegment seg, long index, double x) {
        spng_chrm.white_point_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red_x$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("red_x"));
    public static VarHandle red_x$VH() {
        return spng_chrm.red_x$VH;
    }
    public static double red_x$get(MemorySegment seg) {
        return (double)spng_chrm.red_x$VH.get(seg);
    }
    public static void red_x$set( MemorySegment seg, double x) {
        spng_chrm.red_x$VH.set(seg, x);
    }
    public static double red_x$get(MemorySegment seg, long index) {
        return (double)spng_chrm.red_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red_x$set(MemorySegment seg, long index, double x) {
        spng_chrm.red_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red_y$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("red_y"));
    public static VarHandle red_y$VH() {
        return spng_chrm.red_y$VH;
    }
    public static double red_y$get(MemorySegment seg) {
        return (double)spng_chrm.red_y$VH.get(seg);
    }
    public static void red_y$set( MemorySegment seg, double x) {
        spng_chrm.red_y$VH.set(seg, x);
    }
    public static double red_y$get(MemorySegment seg, long index) {
        return (double)spng_chrm.red_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red_y$set(MemorySegment seg, long index, double x) {
        spng_chrm.red_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_x$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("green_x"));
    public static VarHandle green_x$VH() {
        return spng_chrm.green_x$VH;
    }
    public static double green_x$get(MemorySegment seg) {
        return (double)spng_chrm.green_x$VH.get(seg);
    }
    public static void green_x$set( MemorySegment seg, double x) {
        spng_chrm.green_x$VH.set(seg, x);
    }
    public static double green_x$get(MemorySegment seg, long index) {
        return (double)spng_chrm.green_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_x$set(MemorySegment seg, long index, double x) {
        spng_chrm.green_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_y$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("green_y"));
    public static VarHandle green_y$VH() {
        return spng_chrm.green_y$VH;
    }
    public static double green_y$get(MemorySegment seg) {
        return (double)spng_chrm.green_y$VH.get(seg);
    }
    public static void green_y$set( MemorySegment seg, double x) {
        spng_chrm.green_y$VH.set(seg, x);
    }
    public static double green_y$get(MemorySegment seg, long index) {
        return (double)spng_chrm.green_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_y$set(MemorySegment seg, long index, double x) {
        spng_chrm.green_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue_x$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("blue_x"));
    public static VarHandle blue_x$VH() {
        return spng_chrm.blue_x$VH;
    }
    public static double blue_x$get(MemorySegment seg) {
        return (double)spng_chrm.blue_x$VH.get(seg);
    }
    public static void blue_x$set( MemorySegment seg, double x) {
        spng_chrm.blue_x$VH.set(seg, x);
    }
    public static double blue_x$get(MemorySegment seg, long index) {
        return (double)spng_chrm.blue_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_x$set(MemorySegment seg, long index, double x) {
        spng_chrm.blue_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue_y$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("blue_y"));
    public static VarHandle blue_y$VH() {
        return spng_chrm.blue_y$VH;
    }
    public static double blue_y$get(MemorySegment seg) {
        return (double)spng_chrm.blue_y$VH.get(seg);
    }
    public static void blue_y$set( MemorySegment seg, double x) {
        spng_chrm.blue_y$VH.set(seg, x);
    }
    public static double blue_y$get(MemorySegment seg, long index) {
        return (double)spng_chrm.blue_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_y$set(MemorySegment seg, long index, double x) {
        spng_chrm.blue_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


