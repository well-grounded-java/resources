// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __darwin_x86_thread_state64 {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("__rax"),
        C_LONG_LONG.withName("__rbx"),
        C_LONG_LONG.withName("__rcx"),
        C_LONG_LONG.withName("__rdx"),
        C_LONG_LONG.withName("__rdi"),
        C_LONG_LONG.withName("__rsi"),
        C_LONG_LONG.withName("__rbp"),
        C_LONG_LONG.withName("__rsp"),
        C_LONG_LONG.withName("__r8"),
        C_LONG_LONG.withName("__r9"),
        C_LONG_LONG.withName("__r10"),
        C_LONG_LONG.withName("__r11"),
        C_LONG_LONG.withName("__r12"),
        C_LONG_LONG.withName("__r13"),
        C_LONG_LONG.withName("__r14"),
        C_LONG_LONG.withName("__r15"),
        C_LONG_LONG.withName("__rip"),
        C_LONG_LONG.withName("__rflags"),
        C_LONG_LONG.withName("__cs"),
        C_LONG_LONG.withName("__fs"),
        C_LONG_LONG.withName("__gs")
    ).withName("__darwin_x86_thread_state64");
    public static MemoryLayout $LAYOUT() {
        return __darwin_x86_thread_state64.$struct$LAYOUT;
    }
    static final VarHandle __rax$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rax"));
    public static VarHandle __rax$VH() {
        return __darwin_x86_thread_state64.__rax$VH;
    }
    public static long __rax$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rax$VH.get(seg);
    }
    public static void __rax$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rax$VH.set(seg, x);
    }
    public static long __rax$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rax$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rbx$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rbx"));
    public static VarHandle __rbx$VH() {
        return __darwin_x86_thread_state64.__rbx$VH;
    }
    public static long __rbx$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rbx$VH.get(seg);
    }
    public static void __rbx$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rbx$VH.set(seg, x);
    }
    public static long __rbx$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rbx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rbx$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rbx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rcx$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rcx"));
    public static VarHandle __rcx$VH() {
        return __darwin_x86_thread_state64.__rcx$VH;
    }
    public static long __rcx$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rcx$VH.get(seg);
    }
    public static void __rcx$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rcx$VH.set(seg, x);
    }
    public static long __rcx$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rcx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rcx$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rcx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rdx$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rdx"));
    public static VarHandle __rdx$VH() {
        return __darwin_x86_thread_state64.__rdx$VH;
    }
    public static long __rdx$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rdx$VH.get(seg);
    }
    public static void __rdx$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rdx$VH.set(seg, x);
    }
    public static long __rdx$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rdx$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rdi$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rdi"));
    public static VarHandle __rdi$VH() {
        return __darwin_x86_thread_state64.__rdi$VH;
    }
    public static long __rdi$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rdi$VH.get(seg);
    }
    public static void __rdi$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rdi$VH.set(seg, x);
    }
    public static long __rdi$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rdi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rdi$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rdi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rsi$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rsi"));
    public static VarHandle __rsi$VH() {
        return __darwin_x86_thread_state64.__rsi$VH;
    }
    public static long __rsi$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rsi$VH.get(seg);
    }
    public static void __rsi$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rsi$VH.set(seg, x);
    }
    public static long __rsi$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rsi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rsi$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rsi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rbp$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rbp"));
    public static VarHandle __rbp$VH() {
        return __darwin_x86_thread_state64.__rbp$VH;
    }
    public static long __rbp$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rbp$VH.get(seg);
    }
    public static void __rbp$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rbp$VH.set(seg, x);
    }
    public static long __rbp$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rbp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rbp$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rbp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rsp$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rsp"));
    public static VarHandle __rsp$VH() {
        return __darwin_x86_thread_state64.__rsp$VH;
    }
    public static long __rsp$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rsp$VH.get(seg);
    }
    public static void __rsp$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rsp$VH.set(seg, x);
    }
    public static long __rsp$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rsp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rsp$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rsp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r8$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r8"));
    public static VarHandle __r8$VH() {
        return __darwin_x86_thread_state64.__r8$VH;
    }
    public static long __r8$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r8$VH.get(seg);
    }
    public static void __r8$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r8$VH.set(seg, x);
    }
    public static long __r8$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r8$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r9$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r9"));
    public static VarHandle __r9$VH() {
        return __darwin_x86_thread_state64.__r9$VH;
    }
    public static long __r9$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r9$VH.get(seg);
    }
    public static void __r9$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r9$VH.set(seg, x);
    }
    public static long __r9$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r9$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r9$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r9$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r10$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r10"));
    public static VarHandle __r10$VH() {
        return __darwin_x86_thread_state64.__r10$VH;
    }
    public static long __r10$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r10$VH.get(seg);
    }
    public static void __r10$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r10$VH.set(seg, x);
    }
    public static long __r10$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r10$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r10$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r10$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r11$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r11"));
    public static VarHandle __r11$VH() {
        return __darwin_x86_thread_state64.__r11$VH;
    }
    public static long __r11$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r11$VH.get(seg);
    }
    public static void __r11$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r11$VH.set(seg, x);
    }
    public static long __r11$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r11$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r11$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r11$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r12$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r12"));
    public static VarHandle __r12$VH() {
        return __darwin_x86_thread_state64.__r12$VH;
    }
    public static long __r12$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r12$VH.get(seg);
    }
    public static void __r12$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r12$VH.set(seg, x);
    }
    public static long __r12$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r12$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r12$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r12$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r13$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r13"));
    public static VarHandle __r13$VH() {
        return __darwin_x86_thread_state64.__r13$VH;
    }
    public static long __r13$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r13$VH.get(seg);
    }
    public static void __r13$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r13$VH.set(seg, x);
    }
    public static long __r13$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r13$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r13$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r13$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r14$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r14"));
    public static VarHandle __r14$VH() {
        return __darwin_x86_thread_state64.__r14$VH;
    }
    public static long __r14$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r14$VH.get(seg);
    }
    public static void __r14$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r14$VH.set(seg, x);
    }
    public static long __r14$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r14$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r14$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r14$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __r15$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__r15"));
    public static VarHandle __r15$VH() {
        return __darwin_x86_thread_state64.__r15$VH;
    }
    public static long __r15$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__r15$VH.get(seg);
    }
    public static void __r15$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__r15$VH.set(seg, x);
    }
    public static long __r15$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__r15$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __r15$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__r15$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rip$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rip"));
    public static VarHandle __rip$VH() {
        return __darwin_x86_thread_state64.__rip$VH;
    }
    public static long __rip$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rip$VH.get(seg);
    }
    public static void __rip$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rip$VH.set(seg, x);
    }
    public static long __rip$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rip$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rflags$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__rflags"));
    public static VarHandle __rflags$VH() {
        return __darwin_x86_thread_state64.__rflags$VH;
    }
    public static long __rflags$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__rflags$VH.get(seg);
    }
    public static void __rflags$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__rflags$VH.set(seg, x);
    }
    public static long __rflags$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__rflags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rflags$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__rflags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __cs$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__cs"));
    public static VarHandle __cs$VH() {
        return __darwin_x86_thread_state64.__cs$VH;
    }
    public static long __cs$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__cs$VH.get(seg);
    }
    public static void __cs$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__cs$VH.set(seg, x);
    }
    public static long __cs$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__cs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __cs$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__cs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __fs$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__fs"));
    public static VarHandle __fs$VH() {
        return __darwin_x86_thread_state64.__fs$VH;
    }
    public static long __fs$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__fs$VH.get(seg);
    }
    public static void __fs$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__fs$VH.set(seg, x);
    }
    public static long __fs$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__fs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __fs$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__fs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __gs$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__gs"));
    public static VarHandle __gs$VH() {
        return __darwin_x86_thread_state64.__gs$VH;
    }
    public static long __gs$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_state64.__gs$VH.get(seg);
    }
    public static void __gs$set( MemorySegment seg, long x) {
        __darwin_x86_thread_state64.__gs$VH.set(seg, x);
    }
    public static long __gs$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_state64.__gs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __gs$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_state64.__gs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


