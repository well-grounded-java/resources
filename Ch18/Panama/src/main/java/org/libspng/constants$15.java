// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$15 {

    static final FunctionDescriptor seed48$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle seed48$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "seed48",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$15.seed48$FUNC, false
    );
    static final FunctionDescriptor setenv$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle setenv$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "setenv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$15.setenv$FUNC, false
    );
    static final FunctionDescriptor setkey$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle setkey$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "setkey",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$15.setkey$FUNC, false
    );
    static final FunctionDescriptor setstate$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle setstate$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "setstate",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$15.setstate$FUNC, false
    );
    static final FunctionDescriptor srand48$FUNC = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final MethodHandle srand48$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "srand48",
        "(J)V",
        constants$15.srand48$FUNC, false
    );
    static final FunctionDescriptor srandom$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle srandom$MH = RuntimeHelper.downcallHandle(
        spng_h.LIBRARIES, "srandom",
        "(I)V",
        constants$15.srandom$FUNC, false
    );
}


