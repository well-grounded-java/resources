// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_h extends spng_h_1 {

    static {
        System.loadLibrary("spng");
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ spng_h() {}
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    public static int __MAC_11_4() {
        return (int)110400L;
    }
    public static int __MAC_11_5() {
        return (int)110500L;
    }
    public static int __MAC_11_6() {
        return (int)110600L;
    }
    public static int __MAC_12_0() {
        return (int)120000L;
    }
    public static int __MAC_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    public static int __IPHONE_14_6() {
        return (int)140600L;
    }
    public static int __IPHONE_14_7() {
        return (int)140700L;
    }
    public static int __IPHONE_14_8() {
        return (int)140800L;
    }
    public static int __IPHONE_15_0() {
        return (int)150000L;
    }
    public static int __IPHONE_15_1() {
        return (int)150100L;
    }
    public static int __IPHONE_15_2() {
        return (int)150200L;
    }
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    public static int __TVOS_14_6() {
        return (int)140600L;
    }
    public static int __TVOS_14_7() {
        return (int)140700L;
    }
    public static int __TVOS_15_0() {
        return (int)150000L;
    }
    public static int __TVOS_15_1() {
        return (int)150100L;
    }
    public static int __TVOS_15_2() {
        return (int)150200L;
    }
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    public static int __WATCHOS_7_5() {
        return (int)70500L;
    }
    public static int __WATCHOS_7_6() {
        return (int)70600L;
    }
    public static int __WATCHOS_8_0() {
        return (int)80000L;
    }
    public static int __WATCHOS_8_1() {
        return (int)80100L;
    }
    public static int __WATCHOS_8_3() {
        return (int)80300L;
    }
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    public static int MAC_OS_VERSION_12_0() {
        return (int)120000L;
    }
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    public static int __DRIVERKIT_21_0() {
        return (int)210000L;
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    public static int __DARWIN_NSIG() {
        return (int)32L;
    }
    public static int _I386_SIGNAL_H_() {
        return (int)1L;
    }
    public static int SIGHUP() {
        return (int)1L;
    }
    public static int SIGINT() {
        return (int)2L;
    }
    public static int SIGQUIT() {
        return (int)3L;
    }
    public static int SIGILL() {
        return (int)4L;
    }
    public static int SIGTRAP() {
        return (int)5L;
    }
    public static int SIGABRT() {
        return (int)6L;
    }
    public static int SIGEMT() {
        return (int)7L;
    }
    public static int SIGFPE() {
        return (int)8L;
    }
    public static int SIGKILL() {
        return (int)9L;
    }
    public static int SIGBUS() {
        return (int)10L;
    }
    public static int SIGSEGV() {
        return (int)11L;
    }
    public static int SIGSYS() {
        return (int)12L;
    }
    public static int SIGPIPE() {
        return (int)13L;
    }
    public static int SIGALRM() {
        return (int)14L;
    }
    public static int SIGTERM() {
        return (int)15L;
    }
    public static int SIGURG() {
        return (int)16L;
    }
    public static int SIGSTOP() {
        return (int)17L;
    }
    public static int SIGTSTP() {
        return (int)18L;
    }
    public static int SIGCONT() {
        return (int)19L;
    }
    public static int SIGCHLD() {
        return (int)20L;
    }
    public static int SIGTTIN() {
        return (int)21L;
    }
    public static int SIGTTOU() {
        return (int)22L;
    }
    public static int SIGIO() {
        return (int)23L;
    }
    public static int SIGXCPU() {
        return (int)24L;
    }
    public static int SIGXFSZ() {
        return (int)25L;
    }
    public static int SIGVTALRM() {
        return (int)26L;
    }
    public static int SIGPROF() {
        return (int)27L;
    }
    public static int SIGWINCH() {
        return (int)28L;
    }
    public static int SIGINFO() {
        return (int)29L;
    }
    public static int SIGUSR1() {
        return (int)30L;
    }
    public static int SIGUSR2() {
        return (int)31L;
    }
    public static int FP_PREC_24B() {
        return (int)0L;
    }
    public static int FP_PREC_53B() {
        return (int)2L;
    }
    public static int FP_PREC_64B() {
        return (int)3L;
    }
    public static int FP_RND_NEAR() {
        return (int)0L;
    }
    public static int FP_RND_DOWN() {
        return (int)1L;
    }
    public static int FP_RND_UP() {
        return (int)2L;
    }
    public static int FP_CHOP() {
        return (int)3L;
    }
    public static int FP_STATE_BYTES() {
        return (int)512L;
    }
    public static int _X86_INSTRUCTION_STATE_CACHELINE_SIZE() {
        return (int)64L;
    }
    public static int __LASTBRANCH_MAX() {
        return (int)32L;
    }
    public static int SIGEV_NONE() {
        return (int)0L;
    }
    public static int SIGEV_SIGNAL() {
        return (int)1L;
    }
    public static int SIGEV_THREAD() {
        return (int)3L;
    }
    public static int ILL_NOOP() {
        return (int)0L;
    }
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    public static int ILL_ILLTRP() {
        return (int)2L;
    }
    public static int ILL_PRVOPC() {
        return (int)3L;
    }
    public static int ILL_ILLOPN() {
        return (int)4L;
    }
    public static int ILL_ILLADR() {
        return (int)5L;
    }
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    public static int ILL_COPROC() {
        return (int)7L;
    }
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    public static int FPE_NOOP() {
        return (int)0L;
    }
    public static int FPE_FLTDIV() {
        return (int)1L;
    }
    public static int FPE_FLTOVF() {
        return (int)2L;
    }
    public static int FPE_FLTUND() {
        return (int)3L;
    }
    public static int FPE_FLTRES() {
        return (int)4L;
    }
    public static int FPE_FLTINV() {
        return (int)5L;
    }
    public static int FPE_FLTSUB() {
        return (int)6L;
    }
    public static int FPE_INTDIV() {
        return (int)7L;
    }
    public static int FPE_INTOVF() {
        return (int)8L;
    }
    public static int SEGV_NOOP() {
        return (int)0L;
    }
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    public static int BUS_NOOP() {
        return (int)0L;
    }
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    public static int TRAP_BRKPT() {
        return (int)1L;
    }
    public static int TRAP_TRACE() {
        return (int)2L;
    }
    public static int CLD_NOOP() {
        return (int)0L;
    }
    public static int CLD_EXITED() {
        return (int)1L;
    }
    public static int CLD_KILLED() {
        return (int)2L;
    }
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
    public static int CLD_STOPPED() {
        return (int)5L;
    }
    public static int CLD_CONTINUED() {
        return (int)6L;
    }
    public static int POLL_IN() {
        return (int)1L;
    }
    public static int POLL_OUT() {
        return (int)2L;
    }
    public static int POLL_MSG() {
        return (int)3L;
    }
    public static int POLL_ERR() {
        return (int)4L;
    }
    public static int POLL_PRI() {
        return (int)5L;
    }
    public static int POLL_HUP() {
        return (int)6L;
    }
    public static int SA_ONSTACK() {
        return (int)1L;
    }
    public static int SA_RESTART() {
        return (int)2L;
    }
    public static int SA_RESETHAND() {
        return (int)4L;
    }
    public static int SA_NOCLDSTOP() {
        return (int)8L;
    }
    public static int SA_NODEFER() {
        return (int)16L;
    }
    public static int SA_NOCLDWAIT() {
        return (int)32L;
    }
    public static int SA_SIGINFO() {
        return (int)64L;
    }
    public static int SA_USERTRAMP() {
        return (int)256L;
    }
    public static int SA_64REGSET() {
        return (int)512L;
    }
    public static int SIG_BLOCK() {
        return (int)1L;
    }
    public static int SIG_UNBLOCK() {
        return (int)2L;
    }
    public static int SIG_SETMASK() {
        return (int)3L;
    }
    public static int SI_USER() {
        return (int)65537L;
    }
    public static int SI_QUEUE() {
        return (int)65538L;
    }
    public static int SI_TIMER() {
        return (int)65539L;
    }
    public static int SI_ASYNCIO() {
        return (int)65540L;
    }
    public static int SI_MESGQ() {
        return (int)65541L;
    }
    public static int SS_ONSTACK() {
        return (int)1L;
    }
    public static int SS_DISABLE() {
        return (int)4L;
    }
    public static int MINSIGSTKSZ() {
        return (int)32768L;
    }
    public static int SIGSTKSZ() {
        return (int)131072L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int PRIO_PROCESS() {
        return (int)0L;
    }
    public static int PRIO_PGRP() {
        return (int)1L;
    }
    public static int PRIO_USER() {
        return (int)2L;
    }
    public static int PRIO_DARWIN_THREAD() {
        return (int)3L;
    }
    public static int PRIO_DARWIN_PROCESS() {
        return (int)4L;
    }
    public static int PRIO_MAX() {
        return (int)20L;
    }
    public static int PRIO_DARWIN_BG() {
        return (int)4096L;
    }
    public static int PRIO_DARWIN_NONUI() {
        return (int)4097L;
    }
    public static int RUSAGE_SELF() {
        return (int)0L;
    }
    public static int RUSAGE_INFO_V0() {
        return (int)0L;
    }
    public static int RUSAGE_INFO_V1() {
        return (int)1L;
    }
    public static int RUSAGE_INFO_V2() {
        return (int)2L;
    }
    public static int RUSAGE_INFO_V3() {
        return (int)3L;
    }
    public static int RUSAGE_INFO_V4() {
        return (int)4L;
    }
    public static int RUSAGE_INFO_V5() {
        return (int)5L;
    }
    public static int RU_PROC_RUNS_RESLIDE() {
        return (int)1L;
    }
    public static int RLIMIT_CPU() {
        return (int)0L;
    }
    public static int RLIMIT_FSIZE() {
        return (int)1L;
    }
    public static int RLIMIT_DATA() {
        return (int)2L;
    }
    public static int RLIMIT_STACK() {
        return (int)3L;
    }
    public static int RLIMIT_CORE() {
        return (int)4L;
    }
    public static int RLIMIT_AS() {
        return (int)5L;
    }
    public static int RLIMIT_MEMLOCK() {
        return (int)6L;
    }
    public static int RLIMIT_NPROC() {
        return (int)7L;
    }
    public static int RLIMIT_NOFILE() {
        return (int)8L;
    }
    public static int RLIM_NLIMITS() {
        return (int)9L;
    }
    public static int _RLIMIT_POSIX_FLAG() {
        return (int)4096L;
    }
    public static int RLIMIT_WAKEUPS_MONITOR() {
        return (int)1L;
    }
    public static int RLIMIT_CPU_USAGE_MONITOR() {
        return (int)2L;
    }
    public static int RLIMIT_THREAD_CPULIMITS() {
        return (int)3L;
    }
    public static int RLIMIT_FOOTPRINT_INTERVAL() {
        return (int)4L;
    }
    public static int WAKEMON_ENABLE() {
        return (int)1L;
    }
    public static int WAKEMON_DISABLE() {
        return (int)2L;
    }
    public static int WAKEMON_GET_PARAMS() {
        return (int)4L;
    }
    public static int WAKEMON_SET_DEFAULTS() {
        return (int)8L;
    }
    public static int WAKEMON_MAKE_FATAL() {
        return (int)16L;
    }
    public static int CPUMON_MAKE_FATAL() {
        return (int)4096L;
    }
    public static int FOOTPRINT_INTERVAL_RESET() {
        return (int)1L;
    }
    public static int IOPOL_TYPE_DISK() {
        return (int)0L;
    }
    public static int IOPOL_TYPE_VFS_ATIME_UPDATES() {
        return (int)2L;
    }
    public static int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES() {
        return (int)3L;
    }
    public static int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME() {
        return (int)4L;
    }
    public static int IOPOL_TYPE_VFS_TRIGGER_RESOLVE() {
        return (int)5L;
    }
    public static int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION() {
        return (int)6L;
    }
    public static int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS() {
        return (int)7L;
    }
    public static int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE() {
        return (int)8L;
    }
    public static int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES() {
        return (int)9L;
    }
    public static int IOPOL_SCOPE_PROCESS() {
        return (int)0L;
    }
    public static int IOPOL_SCOPE_THREAD() {
        return (int)1L;
    }
    public static int IOPOL_SCOPE_DARWIN_BG() {
        return (int)2L;
    }
    public static int IOPOL_DEFAULT() {
        return (int)0L;
    }
    public static int IOPOL_IMPORTANT() {
        return (int)1L;
    }
    public static int IOPOL_PASSIVE() {
        return (int)2L;
    }
    public static int IOPOL_THROTTLE() {
        return (int)3L;
    }
    public static int IOPOL_UTILITY() {
        return (int)4L;
    }
    public static int IOPOL_STANDARD() {
        return (int)5L;
    }
    public static int IOPOL_ATIME_UPDATES_DEFAULT() {
        return (int)0L;
    }
    public static int IOPOL_ATIME_UPDATES_OFF() {
        return (int)1L;
    }
    public static int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT() {
        return (int)0L;
    }
    public static int IOPOL_MATERIALIZE_DATALESS_FILES_OFF() {
        return (int)1L;
    }
    public static int IOPOL_MATERIALIZE_DATALESS_FILES_ON() {
        return (int)2L;
    }
    public static int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT() {
        return (int)0L;
    }
    public static int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME() {
        return (int)1L;
    }
    public static int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT() {
        return (int)0L;
    }
    public static int IOPOL_VFS_TRIGGER_RESOLVE_OFF() {
        return (int)1L;
    }
    public static int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT() {
        return (int)0L;
    }
    public static int IOPOL_VFS_CONTENT_PROTECTION_IGNORE() {
        return (int)1L;
    }
    public static int IOPOL_VFS_IGNORE_PERMISSIONS_OFF() {
        return (int)0L;
    }
    public static int IOPOL_VFS_IGNORE_PERMISSIONS_ON() {
        return (int)1L;
    }
    public static int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF() {
        return (int)0L;
    }
    public static int IOPOL_VFS_SKIP_MTIME_UPDATE_ON() {
        return (int)1L;
    }
    public static int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF() {
        return (int)0L;
    }
    public static int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON() {
        return (int)1L;
    }
    public static int WNOHANG() {
        return (int)1L;
    }
    public static int WUNTRACED() {
        return (int)2L;
    }
    public static int WCOREFLAG() {
        return (int)128L;
    }
    public static int _WSTOPPED() {
        return (int)127L;
    }
    public static int WEXITED() {
        return (int)4L;
    }
    public static int WSTOPPED() {
        return (int)8L;
    }
    public static int WCONTINUED() {
        return (int)16L;
    }
    public static int WNOWAIT() {
        return (int)32L;
    }
    public static int WAIT_MYPGRP() {
        return (int)0L;
    }
    public static int _QUAD_HIGHWORD() {
        return (int)1L;
    }
    public static int _QUAD_LOWWORD() {
        return (int)0L;
    }
    public static int __DARWIN_LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __DARWIN_BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __DARWIN_PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    public static int RENAME_SECLUDE() {
        return (int)1L;
    }
    public static int RENAME_SWAP() {
        return (int)2L;
    }
    public static int RENAME_EXCL() {
        return (int)4L;
    }
    public static int __SLBF() {
        return (int)1L;
    }
    public static int __SNBF() {
        return (int)2L;
    }
    public static int __SRD() {
        return (int)4L;
    }
    public static int __SWR() {
        return (int)8L;
    }
    public static int __SRW() {
        return (int)16L;
    }
    public static int __SEOF() {
        return (int)32L;
    }
    public static int __SERR() {
        return (int)64L;
    }
    public static int __SMBF() {
        return (int)128L;
    }
    public static int __SAPP() {
        return (int)256L;
    }
    public static int __SSTR() {
        return (int)512L;
    }
    public static int __SOPT() {
        return (int)1024L;
    }
    public static int __SNPT() {
        return (int)2048L;
    }
    public static int __SOFF() {
        return (int)4096L;
    }
    public static int __SMOD() {
        return (int)8192L;
    }
    public static int __SALC() {
        return (int)16384L;
    }
    public static int __SIGN() {
        return (int)32768L;
    }
    public static int _IOFBF() {
        return (int)0L;
    }
    public static int _IOLBF() {
        return (int)1L;
    }
    public static int _IONBF() {
        return (int)2L;
    }
    public static int BUFSIZ() {
        return (int)1024L;
    }
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    public static int FILENAME_MAX() {
        return (int)1024L;
    }
    public static int L_tmpnam() {
        return (int)1024L;
    }
    public static int TMP_MAX() {
        return (int)308915776L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int L_ctermid() {
        return (int)1024L;
    }
    public static int _USE_FORTIFY_LEVEL() {
        return (int)2L;
    }
    public static int SPNG_VERSION_MAJOR() {
        return (int)0L;
    }
    public static int SPNG_VERSION_MINOR() {
        return (int)7L;
    }
    public static int SPNG_VERSION_PATCH() {
        return (int)2L;
    }
    public static ValueLayout __int16_t = C_SHORT;
    public static ValueLayout __int32_t = C_INT;
    public static ValueLayout __int64_t = C_LONG_LONG;
    public static ValueLayout __darwin_intptr_t = C_LONG;
    public static ValueLayout __darwin_ct_rune_t = C_INT;
    public static ValueLayout __darwin_ptrdiff_t = C_LONG;
    public static ValueLayout __darwin_wchar_t = C_INT;
    public static ValueLayout __darwin_rune_t = C_INT;
    public static ValueLayout __darwin_wint_t = C_INT;
    public static ValueLayout __darwin_ssize_t = C_LONG;
    public static ValueLayout __darwin_time_t = C_LONG;
    public static ValueLayout __darwin_blkcnt_t = C_LONG_LONG;
    public static ValueLayout __darwin_blksize_t = C_INT;
    public static ValueLayout __darwin_dev_t = C_INT;
    public static ValueLayout __darwin_off_t = C_LONG_LONG;
    public static ValueLayout __darwin_pid_t = C_INT;
    public static ValueLayout __darwin_suseconds_t = C_INT;
    public static ValueLayout __darwin_nl_item = C_INT;
    public static ValueLayout __darwin_wctrans_t = C_INT;
    public static int P_ALL() {
        return (int)0L;
    }
    public static int P_PID() {
        return (int)1L;
    }
    public static int P_PGID() {
        return (int)2L;
    }
    public static ValueLayout pid_t = C_INT;
    public static ValueLayout sig_atomic_t = C_INT;
    public static ValueLayout int16_t = C_SHORT;
    public static ValueLayout int32_t = C_INT;
    public static ValueLayout int64_t = C_LONG_LONG;
    public static ValueLayout register_t = C_LONG_LONG;
    public static ValueLayout intptr_t = C_LONG;
    public static ValueLayout user_ssize_t = C_LONG_LONG;
    public static ValueLayout user_long_t = C_LONG_LONG;
    public static ValueLayout user_time_t = C_LONG_LONG;
    public static ValueLayout user_off_t = C_LONG_LONG;
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$0.signal$MH,"signal");
    }
    public static MemoryAddress signal ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.signal$MH, "signal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout int_least16_t = C_SHORT;
    public static ValueLayout int_least32_t = C_INT;
    public static ValueLayout int_least64_t = C_LONG_LONG;
    public static ValueLayout int_fast16_t = C_SHORT;
    public static ValueLayout int_fast32_t = C_INT;
    public static ValueLayout int_fast64_t = C_LONG_LONG;
    public static ValueLayout intmax_t = C_LONG;
    public static MethodHandle getpriority$MH() {
        return RuntimeHelper.requireNonNull(constants$0.getpriority$MH,"getpriority");
    }
    public static int getpriority ( int x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.getpriority$MH, "getpriority");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getiopolicy_np$MH() {
        return RuntimeHelper.requireNonNull(constants$1.getiopolicy_np$MH,"getiopolicy_np");
    }
    public static int getiopolicy_np ( int x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.getiopolicy_np$MH, "getiopolicy_np");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getrlimit$MH() {
        return RuntimeHelper.requireNonNull(constants$1.getrlimit$MH,"getrlimit");
    }
    public static int getrlimit ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.getrlimit$MH, "getrlimit");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getrusage$MH() {
        return RuntimeHelper.requireNonNull(constants$1.getrusage$MH,"getrusage");
    }
    public static int getrusage ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.getrusage$MH, "getrusage");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpriority$MH() {
        return RuntimeHelper.requireNonNull(constants$1.setpriority$MH,"setpriority");
    }
    public static int setpriority ( int x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.setpriority$MH, "setpriority");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setiopolicy_np$MH() {
        return RuntimeHelper.requireNonNull(constants$1.setiopolicy_np$MH,"setiopolicy_np");
    }
    public static int setiopolicy_np ( int x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.setiopolicy_np$MH, "setiopolicy_np");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setrlimit$MH() {
        return RuntimeHelper.requireNonNull(constants$1.setrlimit$MH,"setrlimit");
    }
    public static int setrlimit ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.setrlimit$MH, "setrlimit");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt16$MH() {
        return RuntimeHelper.requireNonNull(constants$2._OSSwapInt16$MH,"_OSSwapInt16");
    }
    public static short _OSSwapInt16 ( short _data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2._OSSwapInt16$MH, "_OSSwapInt16");
        try {
            return (short)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt32$MH() {
        return RuntimeHelper.requireNonNull(constants$2._OSSwapInt32$MH,"_OSSwapInt32");
    }
    public static int _OSSwapInt32 ( int _data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2._OSSwapInt32$MH, "_OSSwapInt32");
        try {
            return (int)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt64$MH() {
        return RuntimeHelper.requireNonNull(constants$2._OSSwapInt64$MH,"_OSSwapInt64");
    }
    public static long _OSSwapInt64 ( long _data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2._OSSwapInt64$MH, "_OSSwapInt64");
        try {
            return (long)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wait$MH() {
        return RuntimeHelper.requireNonNull(constants$2.wait$MH,"wait");
    }
    public static int wait ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.wait$MH, "wait");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waitpid$MH() {
        return RuntimeHelper.requireNonNull(constants$2.waitpid$MH,"waitpid");
    }
    public static int waitpid ( int x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.waitpid$MH, "waitpid");
        try {
            return (int)mh$.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waitid$MH() {
        return RuntimeHelper.requireNonNull(constants$2.waitid$MH,"waitid");
    }
    public static int waitid ( int x0,  int x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.waitid$MH, "waitid");
        try {
            return (int)mh$.invokeExact(x0, x1, x2.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wait3$MH() {
        return RuntimeHelper.requireNonNull(constants$3.wait3$MH,"wait3");
    }
    public static int wait3 ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.wait3$MH, "wait3");
        try {
            return (int)mh$.invokeExact(x0.address(), x1, x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wait4$MH() {
        return RuntimeHelper.requireNonNull(constants$3.wait4$MH,"wait4");
    }
    public static int wait4 ( int x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.wait4$MH, "wait4");
        try {
            return (int)mh$.invokeExact(x0, x1.address(), x2, x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$3.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.alloca$MH, "alloca");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout ct_rune_t = C_INT;
    public static ValueLayout rune_t = C_INT;
    public static ValueLayout wchar_t = C_INT;
    public static MemoryLayout __mb_cur_max$LAYOUT() {
        return constants$3.__mb_cur_max$LAYOUT;
    }
    public static VarHandle __mb_cur_max$VH() {
        return constants$3.__mb_cur_max$VH;
    }
    public static MemorySegment __mb_cur_max$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.__mb_cur_max$SEGMENT,"__mb_cur_max");
    }
    public static int __mb_cur_max$get() {
        return (int) constants$3.__mb_cur_max$VH.get(RuntimeHelper.requireNonNull(constants$3.__mb_cur_max$SEGMENT, "__mb_cur_max"));
    }
    public static void __mb_cur_max$set( int x) {
        constants$3.__mb_cur_max$VH.set(RuntimeHelper.requireNonNull(constants$3.__mb_cur_max$SEGMENT, "__mb_cur_max"), x);
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$3.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.malloc$MH, "malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$3.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __count,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.calloc$MH, "calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__count, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$4.free$MH,"free");
    }
    public static void free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.free$MH, "free");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.realloc$MH, "realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr.address(), __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.valloc$MH, "valloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.aligned_alloc$MH, "aligned_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$4.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.posix_memalign$MH, "posix_memalign");
        try {
            return (int)mh$.invokeExact(__memptr.address(), __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$4.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.abort$MH, "abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$5.abs$MH,"abs");
    }
    public static int abs ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.abs$MH, "abs");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$5.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.atexit$MH, "atexit");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$5.atof$MH,"atof");
    }
    public static double atof ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.atof$MH, "atof");
        try {
            return (double)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$5.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.atoi$MH, "atoi");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$6.atol$MH,"atol");
    }
    public static long atol ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.atol$MH, "atol");
        try {
            return (long)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$6.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.atoll$MH, "atoll");
        try {
            return (long)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$6.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.bsearch$MH, "bsearch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key.address(), __base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$6.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.div$MH, "div");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment div ( ResourceScope scope,  int x1,  int x2) {
        return div(SegmentAllocator.ofScope(scope), x1, x2);
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$7.exit$MH,"exit");
    }
    public static void exit ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.exit$MH, "exit");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.getenv$MH, "getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$7.labs$MH,"labs");
    }
    public static long labs ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.labs$MH, "labs");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$7.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.ldiv$MH, "ldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment ldiv ( ResourceScope scope,  long x1,  long x2) {
        return ldiv(SegmentAllocator.ofScope(scope), x1, x2);
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$7.llabs$MH,"llabs");
    }
    public static long llabs ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.llabs$MH, "llabs");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lldiv$MH, "lldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment lldiv ( ResourceScope scope,  long x1,  long x2) {
        return lldiv(SegmentAllocator.ofScope(scope), x1, x2);
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.mblen$MH, "mblen");
        try {
            return (int)mh$.invokeExact(__s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.mbstowcs$MH, "mbstowcs");
        try {
            return (long)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.mbtowc$MH, "mbtowc");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$8.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.qsort$MH, "qsort");
        try {
            mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$9.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.rand$MH, "rand");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$9.srand$MH,"srand");
    }
    public static void srand ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.srand$MH, "srand");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$9.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.strtod$MH, "strtod");
        try {
            return (double)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$9.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.strtof$MH, "strtof");
        try {
            return (float)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$9.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __str,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.strtol$MH, "strtol");
        try {
            return (long)mh$.invokeExact(__str.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$9.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __str,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.strtoll$MH, "strtoll");
        try {
            return (long)mh$.invokeExact(__str.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$10.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __str,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.strtoul$MH, "strtoul");
        try {
            return (long)mh$.invokeExact(__str.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$10.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __str,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.strtoull$MH, "strtoull");
        try {
            return (long)mh$.invokeExact(__str.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$10.system$MH,"system");
    }
    public static int system ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.system$MH, "system");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$10.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.wcstombs$MH, "wcstombs");
        try {
            return (long)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$10.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.wctomb$MH, "wctomb");
        try {
            return (int)mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$10._Exit$MH,"_Exit");
    }
    public static void _Exit ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10._Exit$MH, "_Exit");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$11.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.a64l$MH, "a64l");
        try {
            return (long)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$11.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.drand48$MH, "drand48");
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double x0,  int x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.ecvt$MH, "ecvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2.address(), x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$11.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.erand48$MH, "erand48");
        try {
            return (double)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double x0,  int x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.fcvt$MH, "fcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2.address(), x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$11.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.gcvt$MH, "gcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.getsubopt$MH, "getsubopt");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle grantpt$MH() {
        return RuntimeHelper.requireNonNull(constants$12.grantpt$MH,"grantpt");
    }
    public static int grantpt ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.grantpt$MH, "grantpt");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$12.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.initstate$MH, "initstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$12.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.jrand48$MH, "jrand48");
        try {
            return (long)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$12.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.l64a$MH, "l64a");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lcong48$MH, "lcong48");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lrand48$MH, "lrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.mktemp$MH, "mktemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.mkstemp$MH, "mkstemp");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.mrand48$MH, "mrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.nrand48$MH, "nrand48");
        try {
            return (long)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_openpt$MH() {
        return RuntimeHelper.requireNonNull(constants$13.posix_openpt$MH,"posix_openpt");
    }
    public static int posix_openpt ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.posix_openpt$MH, "posix_openpt");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ptsname$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ptsname$MH,"ptsname");
    }
    public static MemoryAddress ptsname ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.ptsname$MH, "ptsname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ptsname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ptsname_r$MH,"ptsname_r");
    }
    public static int ptsname_r ( int fildes,  Addressable buffer,  long buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.ptsname_r$MH, "ptsname_r");
        try {
            return (int)mh$.invokeExact(fildes, buffer.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.putenv$MH, "putenv");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$14.random$MH,"random");
    }
    public static long random () {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.random$MH, "random");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$14.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.rand_r$MH, "rand_r");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$14.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.realpath$MH, "realpath");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$15.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.seed48$MH, "seed48");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __overwrite) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.setenv$MH, "setenv");
        try {
            return (int)mh$.invokeExact(__name.address(), __value.address(), __overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setkey$MH() {
        return RuntimeHelper.requireNonNull(constants$15.setkey$MH,"setkey");
    }
    public static void setkey ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.setkey$MH, "setkey");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$15.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.setstate$MH, "setstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$15.srand48$MH,"srand48");
    }
    public static void srand48 ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.srand48$MH, "srand48");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$15.srandom$MH,"srandom");
    }
    public static void srandom ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.srandom$MH, "srandom");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlockpt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.unlockpt$MH,"unlockpt");
    }
    public static int unlockpt ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.unlockpt$MH, "unlockpt");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.unsetenv$MH, "unsetenv");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout dev_t = C_INT;
    public static MethodHandle arc4random$MH() {
        return RuntimeHelper.requireNonNull(constants$16.arc4random$MH,"arc4random");
    }
    public static int arc4random () {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.arc4random$MH, "arc4random");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_addrandom$MH() {
        return RuntimeHelper.requireNonNull(constants$16.arc4random_addrandom$MH,"arc4random_addrandom");
    }
    public static void arc4random_addrandom ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.arc4random_addrandom$MH, "arc4random_addrandom");
        try {
            mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.arc4random_buf$MH,"arc4random_buf");
    }
    public static void arc4random_buf ( Addressable __buf,  long __nbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.arc4random_buf$MH, "arc4random_buf");
        try {
            mh$.invokeExact(__buf.address(), __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_stir$MH() {
        return RuntimeHelper.requireNonNull(constants$16.arc4random_stir$MH,"arc4random_stir");
    }
    public static void arc4random_stir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.arc4random_stir$MH, "arc4random_stir");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_uniform$MH() {
        return RuntimeHelper.requireNonNull(constants$17.arc4random_uniform$MH,"arc4random_uniform");
    }
    public static int arc4random_uniform ( int __upper_bound) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.arc4random_uniform$MH, "arc4random_uniform");
        try {
            return (int)mh$.invokeExact(__upper_bound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit_b$MH() {
        return RuntimeHelper.requireNonNull(constants$17.atexit_b$MH,"atexit_b");
    }
    public static int atexit_b ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.atexit_b$MH, "atexit_b");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch_b$MH() {
        return RuntimeHelper.requireNonNull(constants$18.bsearch_b$MH,"bsearch_b");
    }
    public static MemoryAddress bsearch_b ( Addressable __key,  Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.bsearch_b$MH, "bsearch_b");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key.address(), __base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetcap$MH() {
        return RuntimeHelper.requireNonNull(constants$18.cgetcap$MH,"cgetcap");
    }
    public static MemoryAddress cgetcap ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.cgetcap$MH, "cgetcap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetclose$MH() {
        return RuntimeHelper.requireNonNull(constants$18.cgetclose$MH,"cgetclose");
    }
    public static int cgetclose () {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.cgetclose$MH, "cgetclose");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetent$MH() {
        return RuntimeHelper.requireNonNull(constants$18.cgetent$MH,"cgetent");
    }
    public static int cgetent ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.cgetent$MH, "cgetent");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetfirst$MH() {
        return RuntimeHelper.requireNonNull(constants$18.cgetfirst$MH,"cgetfirst");
    }
    public static int cgetfirst ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.cgetfirst$MH, "cgetfirst");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$18.cgetmatch$MH,"cgetmatch");
    }
    public static int cgetmatch ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.cgetmatch$MH, "cgetmatch");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetnext$MH() {
        return RuntimeHelper.requireNonNull(constants$19.cgetnext$MH,"cgetnext");
    }
    public static int cgetnext ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.cgetnext$MH, "cgetnext");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetnum$MH() {
        return RuntimeHelper.requireNonNull(constants$19.cgetnum$MH,"cgetnum");
    }
    public static int cgetnum ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.cgetnum$MH, "cgetnum");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetset$MH() {
        return RuntimeHelper.requireNonNull(constants$19.cgetset$MH,"cgetset");
    }
    public static int cgetset ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.cgetset$MH, "cgetset");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetstr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.cgetstr$MH,"cgetstr");
    }
    public static int cgetstr ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.cgetstr$MH, "cgetstr");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cgetustr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.cgetustr$MH,"cgetustr");
    }
    public static int cgetustr ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.cgetustr$MH, "cgetustr");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle daemon$MH() {
        return RuntimeHelper.requireNonNull(constants$19.daemon$MH,"daemon");
    }
    public static int daemon ( int x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.daemon$MH, "daemon");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle devname$MH() {
        return RuntimeHelper.requireNonNull(constants$20.devname$MH,"devname");
    }
    public static MemoryAddress devname ( int x0,  short x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.devname$MH, "devname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle devname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.devname_r$MH,"devname_r");
    }
    public static MemoryAddress devname_r ( int x0,  short x1,  Addressable buf,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.devname_r$MH, "devname_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, buf.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getbsize$MH() {
        return RuntimeHelper.requireNonNull(constants$20.getbsize$MH,"getbsize");
    }
    public static MemoryAddress getbsize ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.getbsize$MH, "getbsize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$20.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.getloadavg$MH, "getloadavg");
        try {
            return (int)mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprogname$MH() {
        return RuntimeHelper.requireNonNull(constants$20.getprogname$MH,"getprogname");
    }
    public static MemoryAddress getprogname () {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.getprogname$MH, "getprogname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setprogname$MH() {
        return RuntimeHelper.requireNonNull(constants$20.setprogname$MH,"setprogname");
    }
    public static void setprogname ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.setprogname$MH, "setprogname");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heapsort$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heapsort$MH,"heapsort");
    }
    public static int heapsort ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heapsort$MH, "heapsort");
        try {
            return (int)mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heapsort_b$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heapsort_b$MH,"heapsort_b");
    }
    public static int heapsort_b ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heapsort_b$MH, "heapsort_b");
        try {
            return (int)mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mergesort$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mergesort$MH,"mergesort");
    }
    public static int mergesort ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.mergesort$MH, "mergesort");
        try {
            return (int)mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mergesort_b$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mergesort_b$MH,"mergesort_b");
    }
    public static int mergesort_b ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.mergesort_b$MH, "mergesort_b");
        try {
            return (int)mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psort$MH() {
        return RuntimeHelper.requireNonNull(constants$23.psort$MH,"psort");
    }
    public static void psort ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.psort$MH, "psort");
        try {
            mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psort_b$MH() {
        return RuntimeHelper.requireNonNull(constants$23.psort_b$MH,"psort_b");
    }
    public static void psort_b ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.psort_b$MH, "psort_b");
        try {
            mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psort_r$MH() {
        return RuntimeHelper.requireNonNull(constants$24.psort_r$MH,"psort_r");
    }
    public static void psort_r ( Addressable __base,  long __nel,  long __width,  Addressable x3,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.psort_r$MH, "psort_r");
        try {
            mh$.invokeExact(__base.address(), __nel, __width, x3.address(), __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort_b$MH() {
        return RuntimeHelper.requireNonNull(constants$24.qsort_b$MH,"qsort_b");
    }
    public static void qsort_b ( Addressable __base,  long __nel,  long __width,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.qsort_b$MH, "qsort_b");
        try {
            mh$.invokeExact(__base.address(), __nel, __width, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort_r$MH() {
        return RuntimeHelper.requireNonNull(constants$25.qsort_r$MH,"qsort_r");
    }
    public static void qsort_r ( Addressable __base,  long __nel,  long __width,  Addressable x3,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.qsort_r$MH, "qsort_r");
        try {
            mh$.invokeExact(__base.address(), __nel, __width, x3.address(), __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle radixsort$MH() {
        return RuntimeHelper.requireNonNull(constants$25.radixsort$MH,"radixsort");
    }
    public static int radixsort ( Addressable __base,  int __nel,  Addressable __table,  int __endbyte) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.radixsort$MH, "radixsort");
        try {
            return (int)mh$.invokeExact(__base.address(), __nel, __table.address(), __endbyte);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$25.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.rpmatch$MH, "rpmatch");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sradixsort$MH() {
        return RuntimeHelper.requireNonNull(constants$25.sradixsort$MH,"sradixsort");
    }
    public static int sradixsort ( Addressable __base,  int __nel,  Addressable __table,  int __endbyte) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.sradixsort$MH, "sradixsort");
        try {
            return (int)mh$.invokeExact(__base.address(), __nel, __table.address(), __endbyte);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sranddev$MH() {
        return RuntimeHelper.requireNonNull(constants$26.sranddev$MH,"sranddev");
    }
    public static void sranddev () {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.sranddev$MH, "sranddev");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandomdev$MH() {
        return RuntimeHelper.requireNonNull(constants$26.srandomdev$MH,"srandomdev");
    }
    public static void srandomdev () {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.srandomdev$MH, "srandomdev");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.reallocf$MH,"reallocf");
    }
    public static MemoryAddress reallocf ( Addressable __ptr,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.reallocf$MH, "reallocf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr.address(), __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtonum$MH() {
        return RuntimeHelper.requireNonNull(constants$26.strtonum$MH,"strtonum");
    }
    public static long strtonum ( Addressable __numstr,  long __minval,  long __maxval,  Addressable __errstrp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.strtonum$MH, "strtonum");
        try {
            return (long)mh$.invokeExact(__numstr.address(), __minval, __maxval, __errstrp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$26.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __str,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.strtoq$MH, "strtoq");
        try {
            return (long)mh$.invokeExact(__str.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$26.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __str,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.strtouq$MH, "strtouq");
        try {
            return (long)mh$.invokeExact(__str.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout suboptarg$LAYOUT() {
        return constants$27.suboptarg$LAYOUT;
    }
    public static VarHandle suboptarg$VH() {
        return constants$27.suboptarg$VH;
    }
    public static MemorySegment suboptarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.suboptarg$SEGMENT,"suboptarg");
    }
    public static MemoryAddress suboptarg$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$27.suboptarg$VH.get(RuntimeHelper.requireNonNull(constants$27.suboptarg$SEGMENT, "suboptarg"));
    }
    public static void suboptarg$set( MemoryAddress x) {
        constants$27.suboptarg$VH.set(RuntimeHelper.requireNonNull(constants$27.suboptarg$SEGMENT, "suboptarg"), x);
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$27.renameat$MH,"renameat");
    }
    public static int renameat ( int x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.renameat$MH, "renameat");
        try {
            return (int)mh$.invokeExact(x0, x1.address(), x2, x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renamex_np$MH() {
        return RuntimeHelper.requireNonNull(constants$27.renamex_np$MH,"renamex_np");
    }
    public static int renamex_np ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.renamex_np$MH, "renamex_np");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$27.renameatx_np$MH,"renameatx_np");
    }
    public static int renameatx_np ( int x0,  Addressable x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.renameatx_np$MH, "renameatx_np");
        try {
            return (int)mh$.invokeExact(x0, x1.address(), x2, x3.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout fpos_t = C_LONG_LONG;
    public static MemoryLayout __stdinp$LAYOUT() {
        return constants$27.__stdinp$LAYOUT;
    }
    public static VarHandle __stdinp$VH() {
        return constants$27.__stdinp$VH;
    }
    public static MemorySegment __stdinp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.__stdinp$SEGMENT,"__stdinp");
    }
    public static MemoryAddress __stdinp$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$27.__stdinp$VH.get(RuntimeHelper.requireNonNull(constants$27.__stdinp$SEGMENT, "__stdinp"));
    }
    public static void __stdinp$set( MemoryAddress x) {
        constants$27.__stdinp$VH.set(RuntimeHelper.requireNonNull(constants$27.__stdinp$SEGMENT, "__stdinp"), x);
    }
    public static MemoryLayout __stdoutp$LAYOUT() {
        return constants$27.__stdoutp$LAYOUT;
    }
    public static VarHandle __stdoutp$VH() {
        return constants$27.__stdoutp$VH;
    }
    public static MemorySegment __stdoutp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$27.__stdoutp$SEGMENT,"__stdoutp");
    }
    public static MemoryAddress __stdoutp$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$27.__stdoutp$VH.get(RuntimeHelper.requireNonNull(constants$27.__stdoutp$SEGMENT, "__stdoutp"));
    }
    public static void __stdoutp$set( MemoryAddress x) {
        constants$27.__stdoutp$VH.set(RuntimeHelper.requireNonNull(constants$27.__stdoutp$SEGMENT, "__stdoutp"), x);
    }
    public static MemoryLayout __stderrp$LAYOUT() {
        return constants$28.__stderrp$LAYOUT;
    }
    public static VarHandle __stderrp$VH() {
        return constants$28.__stderrp$VH;
    }
    public static MemorySegment __stderrp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$28.__stderrp$SEGMENT,"__stderrp");
    }
    public static MemoryAddress __stderrp$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$28.__stderrp$VH.get(RuntimeHelper.requireNonNull(constants$28.__stderrp$SEGMENT, "__stderrp"));
    }
    public static void __stderrp$set( MemoryAddress x) {
        constants$28.__stderrp$VH.set(RuntimeHelper.requireNonNull(constants$28.__stderrp$SEGMENT, "__stderrp"), x);
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.clearerr$MH, "clearerr");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.fclose$MH, "fclose");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$28.feof$MH,"feof");
    }
    public static int feof ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.feof$MH, "feof");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$28.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.ferror$MH, "ferror");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.fflush$MH, "fflush");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.fgetc$MH, "fgetc");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.fgetpos$MH, "fgetpos");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.fgets$MH, "fgets");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1, x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable __filename,  Addressable __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.fopen$MH, "fopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__filename.address(), __mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.fprintf$MH, "fprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$29.fputc$MH,"fputc");
    }
    public static int fputc ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.fputc$MH, "fputc");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.fputs$MH, "fputs");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fread$MH,"fread");
    }
    public static long fread ( Addressable __ptr,  long __size,  long __nitems,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.fread$MH, "fread");
        try {
            return (long)mh$.invokeExact(__ptr.address(), __size, __nitems, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$30.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.freopen$MH, "freopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.fscanf$MH, "fscanf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.fseek$MH, "fseek");
        try {
            return (int)mh$.invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.fsetpos$MH, "fsetpos");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$31.ftell$MH,"ftell");
    }
    public static long ftell ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.ftell$MH, "ftell");
        try {
            return (long)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable __ptr,  long __size,  long __nitems,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.fwrite$MH, "fwrite");
        try {
            return (long)mh$.invokeExact(__ptr.address(), __size, __nitems, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getc$MH,"getc");
    }
    public static int getc ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.getc$MH, "getc");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.getchar$MH, "getchar");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets$MH() {
        return RuntimeHelper.requireNonNull(constants$31.gets$MH,"gets");
    }
    public static MemoryAddress gets ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.gets$MH, "gets");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$31.perror$MH,"perror");
    }
    public static void perror ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.perror$MH, "perror");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.printf$MH,"printf");
    }
    public static int printf ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.printf$MH, "printf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.putc$MH,"putc");
    }
    public static int putc ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.putc$MH, "putc");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$32.putchar$MH,"putchar");
    }
    public static int putchar ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.putchar$MH, "putchar");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$32.puts$MH,"puts");
    }
    public static int puts ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.puts$MH, "puts");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$32.remove$MH,"remove");
    }
    public static int remove ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.remove$MH, "remove");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$32.rename$MH,"rename");
    }
    public static int rename ( Addressable __old,  Addressable __new) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.rename$MH, "rename");
        try {
            return (int)mh$.invokeExact(__old.address(), __new.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$33.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.rewind$MH, "rewind");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.scanf$MH, "scanf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.setbuf$MH, "setbuf");
        try {
            mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable x0,  Addressable x1,  int x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.setvbuf$MH, "setvbuf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.sprintf$MH, "sprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.sscanf$MH, "sscanf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$34.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.tmpfile$MH, "tmpfile");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$34.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.tmpnam$MH, "tmpnam");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$34.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.ungetc$MH, "ungetc");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.vfprintf$MH, "vfprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.vprintf$MH, "vprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.vsprintf$MH, "vsprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$35.ctermid$MH,"ctermid");
    }
    public static MemoryAddress ctermid ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.ctermid$MH, "ctermid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.fdopen$MH, "fdopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.fileno$MH, "fileno");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$35.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.pclose$MH, "pclose");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$35.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.popen$MH, "popen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __srget$MH() {
        return RuntimeHelper.requireNonNull(constants$35.__srget$MH,"__srget");
    }
    public static int __srget ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.__srget$MH, "__srget");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __svfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__svfscanf$MH,"__svfscanf");
    }
    public static int __svfscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__svfscanf$MH, "__svfscanf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__swbuf$MH,"__swbuf");
    }
    public static int __swbuf ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__swbuf$MH, "__swbuf");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sputc$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__sputc$MH,"__sputc");
    }
    public static int __sputc ( int _c,  Addressable _p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__sputc$MH, "__sputc");
        try {
            return (int)mh$.invokeExact(_c, _p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.flockfile$MH,"flockfile");
    }
    public static void flockfile ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.flockfile$MH, "flockfile");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.ftrylockfile$MH,"ftrylockfile");
    }
    public static int ftrylockfile ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.ftrylockfile$MH, "ftrylockfile");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.funlockfile$MH,"funlockfile");
    }
    public static void funlockfile ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.funlockfile$MH, "funlockfile");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getc_unlocked$MH,"getc_unlocked");
    }
    public static int getc_unlocked ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.getc_unlocked$MH, "getc_unlocked");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getchar_unlocked$MH,"getchar_unlocked");
    }
    public static int getchar_unlocked () {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.getchar_unlocked$MH, "getchar_unlocked");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.putc_unlocked$MH,"putc_unlocked");
    }
    public static int putc_unlocked ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.putc_unlocked$MH, "putc_unlocked");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.putchar_unlocked$MH,"putchar_unlocked");
    }
    public static int putchar_unlocked ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.putchar_unlocked$MH, "putchar_unlocked");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getw$MH,"getw");
    }
    public static int getw ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.getw$MH, "getw");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$37.putw$MH,"putw");
    }
    public static int putw ( int x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.putw$MH, "putw");
        try {
            return (int)mh$.invokeExact(x0, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$38.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable __dir,  Addressable __prefix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.tempnam$MH, "tempnam");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dir.address(), __prefix.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout off_t = C_LONG_LONG;
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fseeko$MH,"fseeko");
    }
    public static int fseeko ( Addressable __stream,  long __offset,  int __whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.fseeko$MH, "fseeko");
        try {
            return (int)mh$.invokeExact(__stream.address(), __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ftello$MH,"ftello");
    }
    public static long ftello ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.ftello$MH, "ftello");
        try {
            return (long)mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable __str,  long __size,  Addressable __format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.snprintf$MH, "snprintf");
        try {
            return (int)mh$.invokeExact(__str.address(), __size, __format.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable __stream,  Addressable __format,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.vfscanf$MH, "vfscanf");
        try {
            return (int)mh$.invokeExact(__stream.address(), __format.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable __format,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.vscanf$MH, "vscanf");
        try {
            return (int)mh$.invokeExact(__format.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable __str,  long __size,  Addressable __format,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.vsnprintf$MH, "vsnprintf");
        try {
            return (int)mh$.invokeExact(__str.address(), __size, __format.address(), x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable __str,  Addressable __format,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.vsscanf$MH, "vsscanf");
        try {
            return (int)mh$.invokeExact(__str.address(), __format.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout ssize_t = C_LONG;
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.dprintf$MH,"dprintf");
    }
    public static int dprintf ( int x0,  Addressable x1, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.dprintf$MH, "dprintf");
        try {
            return (int)mh$.invokeExact(x0, x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.vdprintf$MH,"vdprintf");
    }
    public static int vdprintf ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.vdprintf$MH, "vdprintf");
        try {
            return (int)mh$.invokeExact(x0, x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getdelim$MH,"getdelim");
    }
    public static long getdelim ( Addressable __linep,  Addressable __linecapp,  int __delimiter,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.getdelim$MH, "getdelim");
        try {
            return (long)mh$.invokeExact(__linep.address(), __linecapp.address(), __delimiter, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getline$MH,"getline");
    }
    public static long getline ( Addressable __linep,  Addressable __linecapp,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.getline$MH, "getline");
        try {
            return (long)mh$.invokeExact(__linep.address(), __linecapp.address(), __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.fmemopen$MH,"fmemopen");
    }
    public static MemoryAddress fmemopen ( Addressable __buf,  long __size,  Addressable __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.fmemopen$MH, "fmemopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__buf.address(), __size, __mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$40.open_memstream$MH,"open_memstream");
    }
    public static MemoryAddress open_memstream ( Addressable __bufp,  Addressable __sizep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.open_memstream$MH, "open_memstream");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__bufp.address(), __sizep.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout sys_nerr$LAYOUT() {
        return constants$40.sys_nerr$LAYOUT;
    }
    public static VarHandle sys_nerr$VH() {
        return constants$40.sys_nerr$VH;
    }
    public static MemorySegment sys_nerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.sys_nerr$SEGMENT,"sys_nerr");
    }
    public static int sys_nerr$get() {
        return (int) constants$40.sys_nerr$VH.get(RuntimeHelper.requireNonNull(constants$40.sys_nerr$SEGMENT, "sys_nerr"));
    }
    public static void sys_nerr$set( int x) {
        constants$40.sys_nerr$VH.set(RuntimeHelper.requireNonNull(constants$40.sys_nerr$SEGMENT, "sys_nerr"), x);
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.asprintf$MH,"asprintf");
    }
    public static int asprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.asprintf$MH, "asprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.ctermid_r$MH,"ctermid_r");
    }
    public static MemoryAddress ctermid_r ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.ctermid_r$MH, "ctermid_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetln$MH() {
        return RuntimeHelper.requireNonNull(constants$40.fgetln$MH,"fgetln");
    }
    public static MemoryAddress fgetln ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.fgetln$MH, "fgetln");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmtcheck$MH() {
        return RuntimeHelper.requireNonNull(constants$41.fmtcheck$MH,"fmtcheck");
    }
    public static MemoryAddress fmtcheck ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.fmtcheck$MH, "fmtcheck");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpurge$MH() {
        return RuntimeHelper.requireNonNull(constants$41.fpurge$MH,"fpurge");
    }
    public static int fpurge ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.fpurge$MH, "fpurge");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$41.setbuffer$MH,"setbuffer");
    }
    public static void setbuffer ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.setbuffer$MH, "setbuffer");
        try {
            mh$.invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.setlinebuf$MH,"setlinebuf");
    }
    public static int setlinebuf ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.setlinebuf$MH, "setlinebuf");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.vasprintf$MH,"vasprintf");
    }
    public static int vasprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.vasprintf$MH, "vasprintf");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funopen$MH() {
        return RuntimeHelper.requireNonNull(constants$43.funopen$MH,"funopen");
    }
    public static MemoryAddress funopen ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.funopen$MH, "funopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), x1.address(), x2.address(), x3.address(), x4.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__sprintf_chk$MH,"__sprintf_chk");
    }
    public static int __sprintf_chk ( Addressable x0,  int x1,  long x2,  Addressable x3, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__sprintf_chk$MH, "__sprintf_chk");
        try {
            return (int)mh$.invokeExact(x0.address(), x1, x2, x3.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __snprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__snprintf_chk$MH,"__snprintf_chk");
    }
    public static int __snprintf_chk ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4, Object... x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__snprintf_chk$MH, "__snprintf_chk");
        try {
            return (int)mh$.invokeExact(x0.address(), x1, x2, x3, x4.address(), x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__vsprintf_chk$MH,"__vsprintf_chk");
    }
    public static int __vsprintf_chk ( Addressable x0,  int x1,  long x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__vsprintf_chk$MH, "__vsprintf_chk");
        try {
            return (int)mh$.invokeExact(x0.address(), x1, x2, x3.address(), x4.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsnprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__vsnprintf_chk$MH,"__vsnprintf_chk");
    }
    public static int __vsnprintf_chk ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__vsnprintf_chk$MH, "__vsnprintf_chk");
        try {
            return (int)mh$.invokeExact(x0.address(), x1, x2, x3, x4.address(), x5.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SPNG_IO_ERROR() {
        return (int)-2L;
    }
    public static int SPNG_IO_EOF() {
        return (int)-1L;
    }
    public static int SPNG_OK() {
        return (int)0L;
    }
    public static int SPNG_EINVAL() {
        return (int)1L;
    }
    public static int SPNG_EMEM() {
        return (int)2L;
    }
    public static int SPNG_EOVERFLOW() {
        return (int)3L;
    }
    public static int SPNG_ESIGNATURE() {
        return (int)4L;
    }
    public static int SPNG_EWIDTH() {
        return (int)5L;
    }
    public static int SPNG_EHEIGHT() {
        return (int)6L;
    }
    public static int SPNG_EUSER_WIDTH() {
        return (int)7L;
    }
    public static int SPNG_EUSER_HEIGHT() {
        return (int)8L;
    }
    public static int SPNG_EBIT_DEPTH() {
        return (int)9L;
    }
    public static int SPNG_ECOLOR_TYPE() {
        return (int)10L;
    }
    public static int SPNG_ECOMPRESSION_METHOD() {
        return (int)11L;
    }
    public static int SPNG_EFILTER_METHOD() {
        return (int)12L;
    }
    public static int SPNG_EINTERLACE_METHOD() {
        return (int)13L;
    }
    public static int SPNG_EIHDR_SIZE() {
        return (int)14L;
    }
    public static int SPNG_ENOIHDR() {
        return (int)15L;
    }
    public static int SPNG_ECHUNK_POS() {
        return (int)16L;
    }
    public static int SPNG_ECHUNK_SIZE() {
        return (int)17L;
    }
    public static int SPNG_ECHUNK_CRC() {
        return (int)18L;
    }
    public static int SPNG_ECHUNK_TYPE() {
        return (int)19L;
    }
    public static int SPNG_ECHUNK_UNKNOWN_CRITICAL() {
        return (int)20L;
    }
    public static int SPNG_EDUP_PLTE() {
        return (int)21L;
    }
    public static int SPNG_EDUP_CHRM() {
        return (int)22L;
    }
    public static int SPNG_EDUP_GAMA() {
        return (int)23L;
    }
    public static int SPNG_EDUP_ICCP() {
        return (int)24L;
    }
    public static int SPNG_EDUP_SBIT() {
        return (int)25L;
    }
    public static int SPNG_EDUP_SRGB() {
        return (int)26L;
    }
    public static int SPNG_EDUP_BKGD() {
        return (int)27L;
    }
    public static int SPNG_EDUP_HIST() {
        return (int)28L;
    }
    public static int SPNG_EDUP_TRNS() {
        return (int)29L;
    }
    public static int SPNG_EDUP_PHYS() {
        return (int)30L;
    }
    public static int SPNG_EDUP_TIME() {
        return (int)31L;
    }
    public static int SPNG_EDUP_OFFS() {
        return (int)32L;
    }
    public static int SPNG_EDUP_EXIF() {
        return (int)33L;
    }
    public static int SPNG_ECHRM() {
        return (int)34L;
    }
    public static int SPNG_EPLTE_IDX() {
        return (int)35L;
    }
    public static int SPNG_ETRNS_COLOR_TYPE() {
        return (int)36L;
    }
    public static int SPNG_ETRNS_NO_PLTE() {
        return (int)37L;
    }
    public static int SPNG_EGAMA() {
        return (int)38L;
    }
    public static int SPNG_EICCP_NAME() {
        return (int)39L;
    }
    public static int SPNG_EICCP_COMPRESSION_METHOD() {
        return (int)40L;
    }
    public static int SPNG_ESBIT() {
        return (int)41L;
    }
    public static int SPNG_ESRGB() {
        return (int)42L;
    }
    public static int SPNG_ETEXT() {
        return (int)43L;
    }
    public static int SPNG_ETEXT_KEYWORD() {
        return (int)44L;
    }
    public static int SPNG_EZTXT() {
        return (int)45L;
    }
    public static int SPNG_EZTXT_COMPRESSION_METHOD() {
        return (int)46L;
    }
    public static int SPNG_EITXT() {
        return (int)47L;
    }
    public static int SPNG_EITXT_COMPRESSION_FLAG() {
        return (int)48L;
    }
    public static int SPNG_EITXT_COMPRESSION_METHOD() {
        return (int)49L;
    }
    public static int SPNG_EITXT_LANG_TAG() {
        return (int)50L;
    }
    public static int SPNG_EITXT_TRANSLATED_KEY() {
        return (int)51L;
    }
    public static int SPNG_EBKGD_NO_PLTE() {
        return (int)52L;
    }
    public static int SPNG_EBKGD_PLTE_IDX() {
        return (int)53L;
    }
    public static int SPNG_EHIST_NO_PLTE() {
        return (int)54L;
    }
    public static int SPNG_EPHYS() {
        return (int)55L;
    }
    public static int SPNG_ESPLT_NAME() {
        return (int)56L;
    }
    public static int SPNG_ESPLT_DUP_NAME() {
        return (int)57L;
    }
    public static int SPNG_ESPLT_DEPTH() {
        return (int)58L;
    }
    public static int SPNG_ETIME() {
        return (int)59L;
    }
    public static int SPNG_EOFFS() {
        return (int)60L;
    }
    public static int SPNG_EEXIF() {
        return (int)61L;
    }
    public static int SPNG_EIDAT_TOO_SHORT() {
        return (int)62L;
    }
    public static int SPNG_EIDAT_STREAM() {
        return (int)63L;
    }
    public static int SPNG_EZLIB() {
        return (int)64L;
    }
    public static int SPNG_EFILTER() {
        return (int)65L;
    }
    public static int SPNG_EBUFSIZ() {
        return (int)66L;
    }
    public static int SPNG_EIO() {
        return (int)67L;
    }
    public static int SPNG_EOF() {
        return (int)68L;
    }
    public static int SPNG_EBUF_SET() {
        return (int)69L;
    }
    public static int SPNG_EBADSTATE() {
        return (int)70L;
    }
    public static int SPNG_EFMT() {
        return (int)71L;
    }
    public static int SPNG_EFLAGS() {
        return (int)72L;
    }
    public static int SPNG_ECHUNKAVAIL() {
        return (int)73L;
    }
    public static int SPNG_ENCODE_ONLY() {
        return (int)74L;
    }
    public static int SPNG_EOI() {
        return (int)75L;
    }
    public static int SPNG_ENOPLTE() {
        return (int)76L;
    }
    public static int SPNG_ECHUNK_LIMITS() {
        return (int)77L;
    }
    public static int SPNG_EZLIB_INIT() {
        return (int)78L;
    }
    public static int SPNG_ECHUNK_STDLEN() {
        return (int)79L;
    }
    public static int SPNG_EINTERNAL() {
        return (int)80L;
    }
    public static int SPNG_ECTXTYPE() {
        return (int)81L;
    }
    public static int SPNG_ENOSRC() {
        return (int)82L;
    }
    public static int SPNG_ENODST() {
        return (int)83L;
    }
    public static int SPNG_EOPSTATE() {
        return (int)84L;
    }
    public static int SPNG_ENOTFINAL() {
        return (int)85L;
    }
    public static int SPNG_TEXT() {
        return (int)1L;
    }
    public static int SPNG_ZTXT() {
        return (int)2L;
    }
    public static int SPNG_ITXT() {
        return (int)3L;
    }
    public static int SPNG_COLOR_TYPE_GRAYSCALE() {
        return (int)0L;
    }
    public static int SPNG_COLOR_TYPE_TRUECOLOR() {
        return (int)2L;
    }
    public static int SPNG_COLOR_TYPE_INDEXED() {
        return (int)3L;
    }
    public static int SPNG_COLOR_TYPE_GRAYSCALE_ALPHA() {
        return (int)4L;
    }
    public static int SPNG_COLOR_TYPE_TRUECOLOR_ALPHA() {
        return (int)6L;
    }
    public static int SPNG_FILTER_NONE() {
        return (int)0L;
    }
    public static int SPNG_FILTER_SUB() {
        return (int)1L;
    }
    public static int SPNG_FILTER_UP() {
        return (int)2L;
    }
    public static int SPNG_FILTER_AVERAGE() {
        return (int)3L;
    }
    public static int SPNG_FILTER_PAETH() {
        return (int)4L;
    }
    public static int SPNG_DISABLE_FILTERING() {
        return (int)0L;
    }
    public static int SPNG_FILTER_CHOICE_NONE() {
        return (int)8L;
    }
    public static int SPNG_FILTER_CHOICE_SUB() {
        return (int)16L;
    }
    public static int SPNG_FILTER_CHOICE_UP() {
        return (int)32L;
    }
    public static int SPNG_FILTER_CHOICE_AVG() {
        return (int)64L;
    }
    public static int SPNG_FILTER_CHOICE_PAETH() {
        return (int)128L;
    }
    public static int SPNG_FILTER_CHOICE_ALL() {
        return (int)248L;
    }
    public static int SPNG_INTERLACE_NONE() {
        return (int)0L;
    }
    public static int SPNG_INTERLACE_ADAM7() {
        return (int)1L;
    }
    public static int SPNG_FMT_RGBA8() {
        return (int)1L;
    }
    public static int SPNG_FMT_RGBA16() {
        return (int)2L;
    }
    public static int SPNG_FMT_RGB8() {
        return (int)4L;
    }
    public static int SPNG_FMT_GA8() {
        return (int)16L;
    }
    public static int SPNG_FMT_GA16() {
        return (int)32L;
    }
    public static int SPNG_FMT_G8() {
        return (int)64L;
    }
    public static int SPNG_FMT_PNG() {
        return (int)256L;
    }
    public static int SPNG_FMT_RAW() {
        return (int)512L;
    }
    public static int SPNG_CTX_IGNORE_ADLER32() {
        return (int)1L;
    }
    public static int SPNG_CTX_ENCODER() {
        return (int)2L;
    }
    public static int SPNG_DECODE_USE_TRNS() {
        return (int)1L;
    }
    public static int SPNG_DECODE_USE_GAMA() {
        return (int)2L;
    }
    public static int SPNG_DECODE_USE_SBIT() {
        return (int)8L;
    }
    public static int SPNG_DECODE_TRNS() {
        return (int)1L;
    }
    public static int SPNG_DECODE_GAMMA() {
        return (int)2L;
    }
    public static int SPNG_DECODE_PROGRESSIVE() {
        return (int)256L;
    }
    public static int SPNG_CRC_ERROR() {
        return (int)0L;
    }
    public static int SPNG_CRC_DISCARD() {
        return (int)1L;
    }
    public static int SPNG_CRC_USE() {
        return (int)2L;
    }
    public static int SPNG_ENCODE_PROGRESSIVE() {
        return (int)1L;
    }
    public static int SPNG_ENCODE_FINALIZE() {
        return (int)2L;
    }
    public static int SPNG_AFTER_IHDR() {
        return (int)1L;
    }
    public static int SPNG_AFTER_PLTE() {
        return (int)2L;
    }
    public static int SPNG_AFTER_IDAT() {
        return (int)8L;
    }
    public static int SPNG_KEEP_UNKNOWN_CHUNKS() {
        return (int)1L;
    }
    public static int SPNG_IMG_COMPRESSION_LEVEL() {
        return (int)2L;
    }
    public static int SPNG_IMG_WINDOW_BITS() {
        return (int)3L;
    }
    public static int SPNG_IMG_MEM_LEVEL() {
        return (int)4L;
    }
    public static int SPNG_IMG_COMPRESSION_STRATEGY() {
        return (int)5L;
    }
    public static int SPNG_TEXT_COMPRESSION_LEVEL() {
        return (int)6L;
    }
    public static int SPNG_TEXT_WINDOW_BITS() {
        return (int)7L;
    }
    public static int SPNG_TEXT_MEM_LEVEL() {
        return (int)8L;
    }
    public static int SPNG_TEXT_COMPRESSION_STRATEGY() {
        return (int)9L;
    }
    public static int SPNG_FILTER_CHOICE() {
        return (int)10L;
    }
    public static int SPNG_CHUNK_COUNT_LIMIT() {
        return (int)11L;
    }
    public static int SPNG_ENCODE_TO_BUFFER() {
        return (int)12L;
    }
    public static MethodHandle spng_ctx_new$MH() {
        return RuntimeHelper.requireNonNull(constants$46.spng_ctx_new$MH,"spng_ctx_new");
    }
    public static MemoryAddress spng_ctx_new ( int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.spng_ctx_new$MH, "spng_ctx_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_ctx_new2$MH() {
        return RuntimeHelper.requireNonNull(constants$46.spng_ctx_new2$MH,"spng_ctx_new2");
    }
    public static MemoryAddress spng_ctx_new2 ( Addressable alloc,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.spng_ctx_new2$MH, "spng_ctx_new2");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(alloc.address(), flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_ctx_free$MH() {
        return RuntimeHelper.requireNonNull(constants$46.spng_ctx_free$MH,"spng_ctx_free");
    }
    public static void spng_ctx_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.spng_ctx_free$MH, "spng_ctx_free");
        try {
            mh$.invokeExact(ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_png_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$46.spng_set_png_buffer$MH,"spng_set_png_buffer");
    }
    public static int spng_set_png_buffer ( Addressable ctx,  Addressable buf,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.spng_set_png_buffer$MH, "spng_set_png_buffer");
        try {
            return (int)mh$.invokeExact(ctx.address(), buf.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_png_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$47.spng_set_png_stream$MH,"spng_set_png_stream");
    }
    public static int spng_set_png_stream ( Addressable ctx,  Addressable rw_func,  Addressable user) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.spng_set_png_stream$MH, "spng_set_png_stream");
        try {
            return (int)mh$.invokeExact(ctx.address(), rw_func.address(), user.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_png_file$MH() {
        return RuntimeHelper.requireNonNull(constants$47.spng_set_png_file$MH,"spng_set_png_file");
    }
    public static int spng_set_png_file ( Addressable ctx,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.spng_set_png_file$MH, "spng_set_png_file");
        try {
            return (int)mh$.invokeExact(ctx.address(), file.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_png_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$47.spng_get_png_buffer$MH,"spng_get_png_buffer");
    }
    public static MemoryAddress spng_get_png_buffer ( Addressable ctx,  Addressable len,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.spng_get_png_buffer$MH, "spng_get_png_buffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx.address(), len.address(), error.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_image_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$47.spng_set_image_limits$MH,"spng_set_image_limits");
    }
    public static int spng_set_image_limits ( Addressable ctx,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.spng_set_image_limits$MH, "spng_set_image_limits");
        try {
            return (int)mh$.invokeExact(ctx.address(), width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_image_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$47.spng_get_image_limits$MH,"spng_get_image_limits");
    }
    public static int spng_get_image_limits ( Addressable ctx,  Addressable width,  Addressable height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.spng_get_image_limits$MH, "spng_get_image_limits");
        try {
            return (int)mh$.invokeExact(ctx.address(), width.address(), height.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_chunk_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$47.spng_set_chunk_limits$MH,"spng_set_chunk_limits");
    }
    public static int spng_set_chunk_limits ( Addressable ctx,  long chunk_size,  long cache_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.spng_set_chunk_limits$MH, "spng_set_chunk_limits");
        try {
            return (int)mh$.invokeExact(ctx.address(), chunk_size, cache_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_chunk_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$48.spng_get_chunk_limits$MH,"spng_get_chunk_limits");
    }
    public static int spng_get_chunk_limits ( Addressable ctx,  Addressable chunk_size,  Addressable cache_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.spng_get_chunk_limits$MH, "spng_get_chunk_limits");
        try {
            return (int)mh$.invokeExact(ctx.address(), chunk_size.address(), cache_size.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_crc_action$MH() {
        return RuntimeHelper.requireNonNull(constants$48.spng_set_crc_action$MH,"spng_set_crc_action");
    }
    public static int spng_set_crc_action ( Addressable ctx,  int critical,  int ancillary) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.spng_set_crc_action$MH, "spng_set_crc_action");
        try {
            return (int)mh$.invokeExact(ctx.address(), critical, ancillary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_option$MH() {
        return RuntimeHelper.requireNonNull(constants$48.spng_set_option$MH,"spng_set_option");
    }
    public static int spng_set_option ( Addressable ctx,  int option,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.spng_set_option$MH, "spng_set_option");
        try {
            return (int)mh$.invokeExact(ctx.address(), option, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_option$MH() {
        return RuntimeHelper.requireNonNull(constants$48.spng_get_option$MH,"spng_get_option");
    }
    public static int spng_get_option ( Addressable ctx,  int option,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.spng_get_option$MH, "spng_get_option");
        try {
            return (int)mh$.invokeExact(ctx.address(), option, value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_decoded_image_size$MH() {
        return RuntimeHelper.requireNonNull(constants$48.spng_decoded_image_size$MH,"spng_decoded_image_size");
    }
    public static int spng_decoded_image_size ( Addressable ctx,  int fmt,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.spng_decoded_image_size$MH, "spng_decoded_image_size");
        try {
            return (int)mh$.invokeExact(ctx.address(), fmt, len.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_decode_image$MH() {
        return RuntimeHelper.requireNonNull(constants$48.spng_decode_image$MH,"spng_decode_image");
    }
    public static int spng_decode_image ( Addressable ctx,  Addressable out,  long len,  int fmt,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.spng_decode_image$MH, "spng_decode_image");
        try {
            return (int)mh$.invokeExact(ctx.address(), out.address(), len, fmt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_decode_scanline$MH() {
        return RuntimeHelper.requireNonNull(constants$49.spng_decode_scanline$MH,"spng_decode_scanline");
    }
    public static int spng_decode_scanline ( Addressable ctx,  Addressable out,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.spng_decode_scanline$MH, "spng_decode_scanline");
        try {
            return (int)mh$.invokeExact(ctx.address(), out.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_decode_row$MH() {
        return RuntimeHelper.requireNonNull(constants$49.spng_decode_row$MH,"spng_decode_row");
    }
    public static int spng_decode_row ( Addressable ctx,  Addressable out,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.spng_decode_row$MH, "spng_decode_row");
        try {
            return (int)mh$.invokeExact(ctx.address(), out.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_decode_chunks$MH() {
        return RuntimeHelper.requireNonNull(constants$49.spng_decode_chunks$MH,"spng_decode_chunks");
    }
    public static int spng_decode_chunks ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.spng_decode_chunks$MH, "spng_decode_chunks");
        try {
            return (int)mh$.invokeExact(ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_row_info$MH() {
        return RuntimeHelper.requireNonNull(constants$49.spng_get_row_info$MH,"spng_get_row_info");
    }
    public static int spng_get_row_info ( Addressable ctx,  Addressable row_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.spng_get_row_info$MH, "spng_get_row_info");
        try {
            return (int)mh$.invokeExact(ctx.address(), row_info.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_encode_image$MH() {
        return RuntimeHelper.requireNonNull(constants$49.spng_encode_image$MH,"spng_encode_image");
    }
    public static int spng_encode_image ( Addressable ctx,  Addressable img,  long len,  int fmt,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.spng_encode_image$MH, "spng_encode_image");
        try {
            return (int)mh$.invokeExact(ctx.address(), img.address(), len, fmt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_encode_scanline$MH() {
        return RuntimeHelper.requireNonNull(constants$49.spng_encode_scanline$MH,"spng_encode_scanline");
    }
    public static int spng_encode_scanline ( Addressable ctx,  Addressable scanline,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.spng_encode_scanline$MH, "spng_encode_scanline");
        try {
            return (int)mh$.invokeExact(ctx.address(), scanline.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_encode_row$MH() {
        return RuntimeHelper.requireNonNull(constants$50.spng_encode_row$MH,"spng_encode_row");
    }
    public static int spng_encode_row ( Addressable ctx,  Addressable row,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.spng_encode_row$MH, "spng_encode_row");
        try {
            return (int)mh$.invokeExact(ctx.address(), row.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_encode_chunks$MH() {
        return RuntimeHelper.requireNonNull(constants$50.spng_encode_chunks$MH,"spng_encode_chunks");
    }
    public static int spng_encode_chunks ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.spng_encode_chunks$MH, "spng_encode_chunks");
        try {
            return (int)mh$.invokeExact(ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_ihdr$MH() {
        return RuntimeHelper.requireNonNull(constants$50.spng_get_ihdr$MH,"spng_get_ihdr");
    }
    public static int spng_get_ihdr ( Addressable ctx,  Addressable ihdr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.spng_get_ihdr$MH, "spng_get_ihdr");
        try {
            return (int)mh$.invokeExact(ctx.address(), ihdr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_plte$MH() {
        return RuntimeHelper.requireNonNull(constants$50.spng_get_plte$MH,"spng_get_plte");
    }
    public static int spng_get_plte ( Addressable ctx,  Addressable plte) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.spng_get_plte$MH, "spng_get_plte");
        try {
            return (int)mh$.invokeExact(ctx.address(), plte.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_trns$MH() {
        return RuntimeHelper.requireNonNull(constants$50.spng_get_trns$MH,"spng_get_trns");
    }
    public static int spng_get_trns ( Addressable ctx,  Addressable trns) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.spng_get_trns$MH, "spng_get_trns");
        try {
            return (int)mh$.invokeExact(ctx.address(), trns.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_chrm$MH() {
        return RuntimeHelper.requireNonNull(constants$50.spng_get_chrm$MH,"spng_get_chrm");
    }
    public static int spng_get_chrm ( Addressable ctx,  Addressable chrm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.spng_get_chrm$MH, "spng_get_chrm");
        try {
            return (int)mh$.invokeExact(ctx.address(), chrm.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_chrm_int$MH() {
        return RuntimeHelper.requireNonNull(constants$51.spng_get_chrm_int$MH,"spng_get_chrm_int");
    }
    public static int spng_get_chrm_int ( Addressable ctx,  Addressable chrm_int) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.spng_get_chrm_int$MH, "spng_get_chrm_int");
        try {
            return (int)mh$.invokeExact(ctx.address(), chrm_int.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_gama$MH() {
        return RuntimeHelper.requireNonNull(constants$51.spng_get_gama$MH,"spng_get_gama");
    }
    public static int spng_get_gama ( Addressable ctx,  Addressable gamma) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.spng_get_gama$MH, "spng_get_gama");
        try {
            return (int)mh$.invokeExact(ctx.address(), gamma.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_gama_int$MH() {
        return RuntimeHelper.requireNonNull(constants$51.spng_get_gama_int$MH,"spng_get_gama_int");
    }
    public static int spng_get_gama_int ( Addressable ctx,  Addressable gama_int) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.spng_get_gama_int$MH, "spng_get_gama_int");
        try {
            return (int)mh$.invokeExact(ctx.address(), gama_int.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_iccp$MH() {
        return RuntimeHelper.requireNonNull(constants$51.spng_get_iccp$MH,"spng_get_iccp");
    }
    public static int spng_get_iccp ( Addressable ctx,  Addressable iccp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.spng_get_iccp$MH, "spng_get_iccp");
        try {
            return (int)mh$.invokeExact(ctx.address(), iccp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_sbit$MH() {
        return RuntimeHelper.requireNonNull(constants$51.spng_get_sbit$MH,"spng_get_sbit");
    }
    public static int spng_get_sbit ( Addressable ctx,  Addressable sbit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.spng_get_sbit$MH, "spng_get_sbit");
        try {
            return (int)mh$.invokeExact(ctx.address(), sbit.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_srgb$MH() {
        return RuntimeHelper.requireNonNull(constants$51.spng_get_srgb$MH,"spng_get_srgb");
    }
    public static int spng_get_srgb ( Addressable ctx,  Addressable rendering_intent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.spng_get_srgb$MH, "spng_get_srgb");
        try {
            return (int)mh$.invokeExact(ctx.address(), rendering_intent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_text$MH() {
        return RuntimeHelper.requireNonNull(constants$52.spng_get_text$MH,"spng_get_text");
    }
    public static int spng_get_text ( Addressable ctx,  Addressable text,  Addressable n_text) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.spng_get_text$MH, "spng_get_text");
        try {
            return (int)mh$.invokeExact(ctx.address(), text.address(), n_text.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_bkgd$MH() {
        return RuntimeHelper.requireNonNull(constants$52.spng_get_bkgd$MH,"spng_get_bkgd");
    }
    public static int spng_get_bkgd ( Addressable ctx,  Addressable bkgd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.spng_get_bkgd$MH, "spng_get_bkgd");
        try {
            return (int)mh$.invokeExact(ctx.address(), bkgd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_hist$MH() {
        return RuntimeHelper.requireNonNull(constants$52.spng_get_hist$MH,"spng_get_hist");
    }
    public static int spng_get_hist ( Addressable ctx,  Addressable hist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.spng_get_hist$MH, "spng_get_hist");
        try {
            return (int)mh$.invokeExact(ctx.address(), hist.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_phys$MH() {
        return RuntimeHelper.requireNonNull(constants$52.spng_get_phys$MH,"spng_get_phys");
    }
    public static int spng_get_phys ( Addressable ctx,  Addressable phys) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.spng_get_phys$MH, "spng_get_phys");
        try {
            return (int)mh$.invokeExact(ctx.address(), phys.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_splt$MH() {
        return RuntimeHelper.requireNonNull(constants$52.spng_get_splt$MH,"spng_get_splt");
    }
    public static int spng_get_splt ( Addressable ctx,  Addressable splt,  Addressable n_splt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.spng_get_splt$MH, "spng_get_splt");
        try {
            return (int)mh$.invokeExact(ctx.address(), splt.address(), n_splt.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_time$MH() {
        return RuntimeHelper.requireNonNull(constants$52.spng_get_time$MH,"spng_get_time");
    }
    public static int spng_get_time ( Addressable ctx,  Addressable time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.spng_get_time$MH, "spng_get_time");
        try {
            return (int)mh$.invokeExact(ctx.address(), time.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_unknown_chunks$MH() {
        return RuntimeHelper.requireNonNull(constants$53.spng_get_unknown_chunks$MH,"spng_get_unknown_chunks");
    }
    public static int spng_get_unknown_chunks ( Addressable ctx,  Addressable chunks,  Addressable n_chunks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.spng_get_unknown_chunks$MH, "spng_get_unknown_chunks");
        try {
            return (int)mh$.invokeExact(ctx.address(), chunks.address(), n_chunks.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_offs$MH() {
        return RuntimeHelper.requireNonNull(constants$53.spng_get_offs$MH,"spng_get_offs");
    }
    public static int spng_get_offs ( Addressable ctx,  Addressable offs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.spng_get_offs$MH, "spng_get_offs");
        try {
            return (int)mh$.invokeExact(ctx.address(), offs.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_get_exif$MH() {
        return RuntimeHelper.requireNonNull(constants$53.spng_get_exif$MH,"spng_get_exif");
    }
    public static int spng_get_exif ( Addressable ctx,  Addressable exif) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.spng_get_exif$MH, "spng_get_exif");
        try {
            return (int)mh$.invokeExact(ctx.address(), exif.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_ihdr$MH() {
        return RuntimeHelper.requireNonNull(constants$53.spng_set_ihdr$MH,"spng_set_ihdr");
    }
    public static int spng_set_ihdr ( Addressable ctx,  Addressable ihdr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.spng_set_ihdr$MH, "spng_set_ihdr");
        try {
            return (int)mh$.invokeExact(ctx.address(), ihdr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_plte$MH() {
        return RuntimeHelper.requireNonNull(constants$53.spng_set_plte$MH,"spng_set_plte");
    }
    public static int spng_set_plte ( Addressable ctx,  Addressable plte) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.spng_set_plte$MH, "spng_set_plte");
        try {
            return (int)mh$.invokeExact(ctx.address(), plte.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_trns$MH() {
        return RuntimeHelper.requireNonNull(constants$53.spng_set_trns$MH,"spng_set_trns");
    }
    public static int spng_set_trns ( Addressable ctx,  Addressable trns) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.spng_set_trns$MH, "spng_set_trns");
        try {
            return (int)mh$.invokeExact(ctx.address(), trns.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_chrm$MH() {
        return RuntimeHelper.requireNonNull(constants$54.spng_set_chrm$MH,"spng_set_chrm");
    }
    public static int spng_set_chrm ( Addressable ctx,  Addressable chrm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.spng_set_chrm$MH, "spng_set_chrm");
        try {
            return (int)mh$.invokeExact(ctx.address(), chrm.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_chrm_int$MH() {
        return RuntimeHelper.requireNonNull(constants$54.spng_set_chrm_int$MH,"spng_set_chrm_int");
    }
    public static int spng_set_chrm_int ( Addressable ctx,  Addressable chrm_int) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.spng_set_chrm_int$MH, "spng_set_chrm_int");
        try {
            return (int)mh$.invokeExact(ctx.address(), chrm_int.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_gama$MH() {
        return RuntimeHelper.requireNonNull(constants$54.spng_set_gama$MH,"spng_set_gama");
    }
    public static int spng_set_gama ( Addressable ctx,  double gamma) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.spng_set_gama$MH, "spng_set_gama");
        try {
            return (int)mh$.invokeExact(ctx.address(), gamma);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_gama_int$MH() {
        return RuntimeHelper.requireNonNull(constants$54.spng_set_gama_int$MH,"spng_set_gama_int");
    }
    public static int spng_set_gama_int ( Addressable ctx,  int gamma) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.spng_set_gama_int$MH, "spng_set_gama_int");
        try {
            return (int)mh$.invokeExact(ctx.address(), gamma);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_iccp$MH() {
        return RuntimeHelper.requireNonNull(constants$54.spng_set_iccp$MH,"spng_set_iccp");
    }
    public static int spng_set_iccp ( Addressable ctx,  Addressable iccp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.spng_set_iccp$MH, "spng_set_iccp");
        try {
            return (int)mh$.invokeExact(ctx.address(), iccp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_sbit$MH() {
        return RuntimeHelper.requireNonNull(constants$54.spng_set_sbit$MH,"spng_set_sbit");
    }
    public static int spng_set_sbit ( Addressable ctx,  Addressable sbit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.spng_set_sbit$MH, "spng_set_sbit");
        try {
            return (int)mh$.invokeExact(ctx.address(), sbit.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_srgb$MH() {
        return RuntimeHelper.requireNonNull(constants$55.spng_set_srgb$MH,"spng_set_srgb");
    }
    public static int spng_set_srgb ( Addressable ctx,  byte rendering_intent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.spng_set_srgb$MH, "spng_set_srgb");
        try {
            return (int)mh$.invokeExact(ctx.address(), rendering_intent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_text$MH() {
        return RuntimeHelper.requireNonNull(constants$55.spng_set_text$MH,"spng_set_text");
    }
    public static int spng_set_text ( Addressable ctx,  Addressable text,  int n_text) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.spng_set_text$MH, "spng_set_text");
        try {
            return (int)mh$.invokeExact(ctx.address(), text.address(), n_text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_bkgd$MH() {
        return RuntimeHelper.requireNonNull(constants$55.spng_set_bkgd$MH,"spng_set_bkgd");
    }
    public static int spng_set_bkgd ( Addressable ctx,  Addressable bkgd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.spng_set_bkgd$MH, "spng_set_bkgd");
        try {
            return (int)mh$.invokeExact(ctx.address(), bkgd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_hist$MH() {
        return RuntimeHelper.requireNonNull(constants$55.spng_set_hist$MH,"spng_set_hist");
    }
    public static int spng_set_hist ( Addressable ctx,  Addressable hist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.spng_set_hist$MH, "spng_set_hist");
        try {
            return (int)mh$.invokeExact(ctx.address(), hist.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_phys$MH() {
        return RuntimeHelper.requireNonNull(constants$55.spng_set_phys$MH,"spng_set_phys");
    }
    public static int spng_set_phys ( Addressable ctx,  Addressable phys) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.spng_set_phys$MH, "spng_set_phys");
        try {
            return (int)mh$.invokeExact(ctx.address(), phys.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_splt$MH() {
        return RuntimeHelper.requireNonNull(constants$55.spng_set_splt$MH,"spng_set_splt");
    }
    public static int spng_set_splt ( Addressable ctx,  Addressable splt,  int n_splt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.spng_set_splt$MH, "spng_set_splt");
        try {
            return (int)mh$.invokeExact(ctx.address(), splt.address(), n_splt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_time$MH() {
        return RuntimeHelper.requireNonNull(constants$56.spng_set_time$MH,"spng_set_time");
    }
    public static int spng_set_time ( Addressable ctx,  Addressable time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.spng_set_time$MH, "spng_set_time");
        try {
            return (int)mh$.invokeExact(ctx.address(), time.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_unknown_chunks$MH() {
        return RuntimeHelper.requireNonNull(constants$56.spng_set_unknown_chunks$MH,"spng_set_unknown_chunks");
    }
    public static int spng_set_unknown_chunks ( Addressable ctx,  Addressable chunks,  int n_chunks) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.spng_set_unknown_chunks$MH, "spng_set_unknown_chunks");
        try {
            return (int)mh$.invokeExact(ctx.address(), chunks.address(), n_chunks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_offs$MH() {
        return RuntimeHelper.requireNonNull(constants$56.spng_set_offs$MH,"spng_set_offs");
    }
    public static int spng_set_offs ( Addressable ctx,  Addressable offs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.spng_set_offs$MH, "spng_set_offs");
        try {
            return (int)mh$.invokeExact(ctx.address(), offs.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_set_exif$MH() {
        return RuntimeHelper.requireNonNull(constants$56.spng_set_exif$MH,"spng_set_exif");
    }
    public static int spng_set_exif ( Addressable ctx,  Addressable exif) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.spng_set_exif$MH, "spng_set_exif");
        try {
            return (int)mh$.invokeExact(ctx.address(), exif.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$56.spng_strerror$MH,"spng_strerror");
    }
    public static MemoryAddress spng_strerror ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.spng_strerror$MH, "spng_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle spng_version_string$MH() {
        return RuntimeHelper.requireNonNull(constants$56.spng_version_string$MH,"spng_version_string");
    }
    public static MemoryAddress spng_version_string () {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.spng_version_string$MH, "spng_version_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)101600L;
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)120100L;
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$57.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$57.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$57.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$57.__DARWIN_NULL$ADDR;
    }
    public static int __DARWIN_WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __DARWIN_WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int __DARWIN_WEOF() {
        return (int)-1L;
    }
    public static int NSIG() {
        return (int)32L;
    }
    public static int SIGIOT() {
        return (int)6L;
    }
    public static MemoryAddress SIG_DFL() {
        return constants$57.SIG_DFL$ADDR;
    }
    public static MemoryAddress SIG_IGN() {
        return constants$57.SIG_IGN$ADDR;
    }
    public static MemoryAddress SIG_HOLD() {
        return constants$58.SIG_HOLD$ADDR;
    }
    public static MemoryAddress SIG_ERR() {
        return constants$58.SIG_ERR$ADDR;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES() {
        return (int)2380L;
    }
    public static int SA_USERSPACE_MASK() {
        return (int)127L;
    }
    public static int SV_ONSTACK() {
        return (int)1L;
    }
    public static int SV_INTERRUPT() {
        return (int)2L;
    }
    public static int SV_RESETHAND() {
        return (int)4L;
    }
    public static int SV_NODEFER() {
        return (int)16L;
    }
    public static int SV_NOCLDSTOP() {
        return (int)8L;
    }
    public static int SV_SIGINFO() {
        return (int)64L;
    }
    public static MemoryAddress BADSIG() {
        return constants$58.BADSIG$ADDR;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
}


