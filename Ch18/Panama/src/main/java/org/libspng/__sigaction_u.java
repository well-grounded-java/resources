// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __sigaction_u {

    static final MemoryLayout $union$LAYOUT = MemoryLayout.unionLayout(
        C_POINTER.withName("__sa_handler"),
        C_POINTER.withName("__sa_sigaction")
    ).withName("__sigaction_u");
    public static MemoryLayout $LAYOUT() {
        return __sigaction_u.$union$LAYOUT;
    }
    static final FunctionDescriptor __sa_handler$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle __sa_handler$MH = RuntimeHelper.downcallHandle(
        "(I)V",
        __sigaction_u.__sa_handler$FUNC, false
    );
    public interface __sa_handler {

        void apply(int x0);
        static MemoryAddress allocate(__sa_handler fi) {
            return RuntimeHelper.upcallStub(__sa_handler.class, fi, __sigaction_u.__sa_handler$FUNC, "(I)V");
        }
        static MemoryAddress allocate(__sa_handler fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(__sa_handler.class, fi, __sigaction_u.__sa_handler$FUNC, "(I)V", scope);
        }
        static __sa_handler ofAddress(MemoryAddress addr) {
            return (int x0) -> {
                try {
                    __sigaction_u.__sa_handler$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle __sa_handler$VH = MemoryHandles.asAddressVarHandle($union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sa_handler")));
    public static VarHandle __sa_handler$VH() {
        return __sigaction_u.__sa_handler$VH;
    }
    public static MemoryAddress __sa_handler$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)__sigaction_u.__sa_handler$VH.get(seg);
    }
    public static void __sa_handler$set( MemorySegment seg, MemoryAddress x) {
        __sigaction_u.__sa_handler$VH.set(seg, x);
    }
    public static MemoryAddress __sa_handler$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)__sigaction_u.__sa_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __sa_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        __sigaction_u.__sa_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static __sa_handler __sa_handler (MemorySegment segment) {
        return __sa_handler.ofAddress(__sa_handler$get(segment));
    }
    static final FunctionDescriptor __sa_sigaction$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle __sa_sigaction$MH = RuntimeHelper.downcallHandle(
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        __sigaction_u.__sa_sigaction$FUNC, false
    );
    public interface __sa_sigaction {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(__sa_sigaction fi) {
            return RuntimeHelper.upcallStub(__sa_sigaction.class, fi, __sigaction_u.__sa_sigaction$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(__sa_sigaction fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(__sa_sigaction.class, fi, __sigaction_u.__sa_sigaction$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static __sa_sigaction ofAddress(MemoryAddress addr) {
            return (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    __sigaction_u.__sa_sigaction$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle __sa_sigaction$VH = MemoryHandles.asAddressVarHandle($union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__sa_sigaction")));
    public static VarHandle __sa_sigaction$VH() {
        return __sigaction_u.__sa_sigaction$VH;
    }
    public static MemoryAddress __sa_sigaction$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)__sigaction_u.__sa_sigaction$VH.get(seg);
    }
    public static void __sa_sigaction$set( MemorySegment seg, MemoryAddress x) {
        __sigaction_u.__sa_sigaction$VH.set(seg, x);
    }
    public static MemoryAddress __sa_sigaction$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)__sigaction_u.__sa_sigaction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __sa_sigaction$set(MemorySegment seg, long index, MemoryAddress x) {
        __sigaction_u.__sa_sigaction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static __sa_sigaction __sa_sigaction (MemorySegment segment) {
        return __sa_sigaction.ofAddress(__sa_sigaction$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


