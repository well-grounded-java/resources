// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface funopen$x3 {

    int apply(jdk.incubator.foreign.MemoryAddress x0);
    static MemoryAddress allocate(funopen$x3 fi) {
        return RuntimeHelper.upcallStub(funopen$x3.class, fi, constants$42.funopen$x3$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
    }
    static MemoryAddress allocate(funopen$x3 fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(funopen$x3.class, fi, constants$42.funopen$x3$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static funopen$x3 ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                return (int)constants$43.funopen$x3$MH.invokeExact((Addressable)addr, x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


