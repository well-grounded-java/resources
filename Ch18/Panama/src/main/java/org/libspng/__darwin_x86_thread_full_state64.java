// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __darwin_x86_thread_full_state64 {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG_LONG.withName("__rax"),
            C_LONG_LONG.withName("__rbx"),
            C_LONG_LONG.withName("__rcx"),
            C_LONG_LONG.withName("__rdx"),
            C_LONG_LONG.withName("__rdi"),
            C_LONG_LONG.withName("__rsi"),
            C_LONG_LONG.withName("__rbp"),
            C_LONG_LONG.withName("__rsp"),
            C_LONG_LONG.withName("__r8"),
            C_LONG_LONG.withName("__r9"),
            C_LONG_LONG.withName("__r10"),
            C_LONG_LONG.withName("__r11"),
            C_LONG_LONG.withName("__r12"),
            C_LONG_LONG.withName("__r13"),
            C_LONG_LONG.withName("__r14"),
            C_LONG_LONG.withName("__r15"),
            C_LONG_LONG.withName("__rip"),
            C_LONG_LONG.withName("__rflags"),
            C_LONG_LONG.withName("__cs"),
            C_LONG_LONG.withName("__fs"),
            C_LONG_LONG.withName("__gs")
        ).withName("__ss64"),
        C_LONG_LONG.withName("__ds"),
        C_LONG_LONG.withName("__es"),
        C_LONG_LONG.withName("__ss"),
        C_LONG_LONG.withName("__gsbase")
    ).withName("__darwin_x86_thread_full_state64");
    public static MemoryLayout $LAYOUT() {
        return __darwin_x86_thread_full_state64.$struct$LAYOUT;
    }
    public static MemorySegment __ss64$slice(MemorySegment seg) {
        return seg.asSlice(0, 168);
    }
    static final VarHandle __ds$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__ds"));
    public static VarHandle __ds$VH() {
        return __darwin_x86_thread_full_state64.__ds$VH;
    }
    public static long __ds$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_full_state64.__ds$VH.get(seg);
    }
    public static void __ds$set( MemorySegment seg, long x) {
        __darwin_x86_thread_full_state64.__ds$VH.set(seg, x);
    }
    public static long __ds$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_full_state64.__ds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ds$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_full_state64.__ds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __es$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__es"));
    public static VarHandle __es$VH() {
        return __darwin_x86_thread_full_state64.__es$VH;
    }
    public static long __es$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_full_state64.__es$VH.get(seg);
    }
    public static void __es$set( MemorySegment seg, long x) {
        __darwin_x86_thread_full_state64.__es$VH.set(seg, x);
    }
    public static long __es$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_full_state64.__es$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __es$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_full_state64.__es$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ss$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__ss"));
    public static VarHandle __ss$VH() {
        return __darwin_x86_thread_full_state64.__ss$VH;
    }
    public static long __ss$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_full_state64.__ss$VH.get(seg);
    }
    public static void __ss$set( MemorySegment seg, long x) {
        __darwin_x86_thread_full_state64.__ss$VH.set(seg, x);
    }
    public static long __ss$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_full_state64.__ss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ss$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_full_state64.__ss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __gsbase$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("__gsbase"));
    public static VarHandle __gsbase$VH() {
        return __darwin_x86_thread_full_state64.__gsbase$VH;
    }
    public static long __gsbase$get(MemorySegment seg) {
        return (long)__darwin_x86_thread_full_state64.__gsbase$VH.get(seg);
    }
    public static void __gsbase$set( MemorySegment seg, long x) {
        __darwin_x86_thread_full_state64.__gsbase$VH.set(seg, x);
    }
    public static long __gsbase$get(MemorySegment seg, long index) {
        return (long)__darwin_x86_thread_full_state64.__gsbase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __gsbase$set(MemorySegment seg, long index, long x) {
        __darwin_x86_thread_full_state64.__gsbase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


