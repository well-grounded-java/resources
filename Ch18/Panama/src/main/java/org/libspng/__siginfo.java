// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __siginfo {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("si_signo"),
        C_INT.withName("si_errno"),
        C_INT.withName("si_code"),
        C_INT.withName("si_pid"),
        C_INT.withName("si_uid"),
        C_INT.withName("si_status"),
        C_POINTER.withName("si_addr"),
        MemoryLayout.unionLayout(
            C_INT.withName("sival_int"),
            C_POINTER.withName("sival_ptr")
        ).withName("si_value"),
        C_LONG.withName("si_band"),
        MemoryLayout.sequenceLayout(7, C_LONG).withName("__pad")
    ).withName("__siginfo");
    public static MemoryLayout $LAYOUT() {
        return __siginfo.$struct$LAYOUT;
    }
    static final VarHandle si_signo$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("si_signo"));
    public static VarHandle si_signo$VH() {
        return __siginfo.si_signo$VH;
    }
    public static int si_signo$get(MemorySegment seg) {
        return (int)__siginfo.si_signo$VH.get(seg);
    }
    public static void si_signo$set( MemorySegment seg, int x) {
        __siginfo.si_signo$VH.set(seg, x);
    }
    public static int si_signo$get(MemorySegment seg, long index) {
        return (int)__siginfo.si_signo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_signo$set(MemorySegment seg, long index, int x) {
        __siginfo.si_signo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_errno$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("si_errno"));
    public static VarHandle si_errno$VH() {
        return __siginfo.si_errno$VH;
    }
    public static int si_errno$get(MemorySegment seg) {
        return (int)__siginfo.si_errno$VH.get(seg);
    }
    public static void si_errno$set( MemorySegment seg, int x) {
        __siginfo.si_errno$VH.set(seg, x);
    }
    public static int si_errno$get(MemorySegment seg, long index) {
        return (int)__siginfo.si_errno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_errno$set(MemorySegment seg, long index, int x) {
        __siginfo.si_errno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_code$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("si_code"));
    public static VarHandle si_code$VH() {
        return __siginfo.si_code$VH;
    }
    public static int si_code$get(MemorySegment seg) {
        return (int)__siginfo.si_code$VH.get(seg);
    }
    public static void si_code$set( MemorySegment seg, int x) {
        __siginfo.si_code$VH.set(seg, x);
    }
    public static int si_code$get(MemorySegment seg, long index) {
        return (int)__siginfo.si_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_code$set(MemorySegment seg, long index, int x) {
        __siginfo.si_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_pid$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("si_pid"));
    public static VarHandle si_pid$VH() {
        return __siginfo.si_pid$VH;
    }
    public static int si_pid$get(MemorySegment seg) {
        return (int)__siginfo.si_pid$VH.get(seg);
    }
    public static void si_pid$set( MemorySegment seg, int x) {
        __siginfo.si_pid$VH.set(seg, x);
    }
    public static int si_pid$get(MemorySegment seg, long index) {
        return (int)__siginfo.si_pid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_pid$set(MemorySegment seg, long index, int x) {
        __siginfo.si_pid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_uid$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("si_uid"));
    public static VarHandle si_uid$VH() {
        return __siginfo.si_uid$VH;
    }
    public static int si_uid$get(MemorySegment seg) {
        return (int)__siginfo.si_uid$VH.get(seg);
    }
    public static void si_uid$set( MemorySegment seg, int x) {
        __siginfo.si_uid$VH.set(seg, x);
    }
    public static int si_uid$get(MemorySegment seg, long index) {
        return (int)__siginfo.si_uid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_uid$set(MemorySegment seg, long index, int x) {
        __siginfo.si_uid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_status$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("si_status"));
    public static VarHandle si_status$VH() {
        return __siginfo.si_status$VH;
    }
    public static int si_status$get(MemorySegment seg) {
        return (int)__siginfo.si_status$VH.get(seg);
    }
    public static void si_status$set( MemorySegment seg, int x) {
        __siginfo.si_status$VH.set(seg, x);
    }
    public static int si_status$get(MemorySegment seg, long index) {
        return (int)__siginfo.si_status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_status$set(MemorySegment seg, long index, int x) {
        __siginfo.si_status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_addr$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("si_addr")));
    public static VarHandle si_addr$VH() {
        return __siginfo.si_addr$VH;
    }
    public static MemoryAddress si_addr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)__siginfo.si_addr$VH.get(seg);
    }
    public static void si_addr$set( MemorySegment seg, MemoryAddress x) {
        __siginfo.si_addr$VH.set(seg, x);
    }
    public static MemoryAddress si_addr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)__siginfo.si_addr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_addr$set(MemorySegment seg, long index, MemoryAddress x) {
        __siginfo.si_addr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment si_value$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle si_band$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("si_band"));
    public static VarHandle si_band$VH() {
        return __siginfo.si_band$VH;
    }
    public static long si_band$get(MemorySegment seg) {
        return (long)__siginfo.si_band$VH.get(seg);
    }
    public static void si_band$set( MemorySegment seg, long x) {
        __siginfo.si_band$VH.set(seg, x);
    }
    public static long si_band$get(MemorySegment seg, long index) {
        return (long)__siginfo.si_band$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_band$set(MemorySegment seg, long index, long x) {
        __siginfo.si_band$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment __pad$slice(MemorySegment seg) {
        return seg.asSlice(48, 56);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


