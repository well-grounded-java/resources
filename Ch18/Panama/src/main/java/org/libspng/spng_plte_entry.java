// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_plte_entry {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("red"),
        C_CHAR.withName("green"),
        C_CHAR.withName("blue"),
        C_CHAR.withName("alpha")
    ).withName("spng_plte_entry");
    public static MemoryLayout $LAYOUT() {
        return spng_plte_entry.$struct$LAYOUT;
    }
    static final VarHandle red$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("red"));
    public static VarHandle red$VH() {
        return spng_plte_entry.red$VH;
    }
    public static byte red$get(MemorySegment seg) {
        return (byte)spng_plte_entry.red$VH.get(seg);
    }
    public static void red$set( MemorySegment seg, byte x) {
        spng_plte_entry.red$VH.set(seg, x);
    }
    public static byte red$get(MemorySegment seg, long index) {
        return (byte)spng_plte_entry.red$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red$set(MemorySegment seg, long index, byte x) {
        spng_plte_entry.red$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("green"));
    public static VarHandle green$VH() {
        return spng_plte_entry.green$VH;
    }
    public static byte green$get(MemorySegment seg) {
        return (byte)spng_plte_entry.green$VH.get(seg);
    }
    public static void green$set( MemorySegment seg, byte x) {
        spng_plte_entry.green$VH.set(seg, x);
    }
    public static byte green$get(MemorySegment seg, long index) {
        return (byte)spng_plte_entry.green$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green$set(MemorySegment seg, long index, byte x) {
        spng_plte_entry.green$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("blue"));
    public static VarHandle blue$VH() {
        return spng_plte_entry.blue$VH;
    }
    public static byte blue$get(MemorySegment seg) {
        return (byte)spng_plte_entry.blue$VH.get(seg);
    }
    public static void blue$set( MemorySegment seg, byte x) {
        spng_plte_entry.blue$VH.set(seg, x);
    }
    public static byte blue$get(MemorySegment seg, long index) {
        return (byte)spng_plte_entry.blue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue$set(MemorySegment seg, long index, byte x) {
        spng_plte_entry.blue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle alpha$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("alpha"));
    public static VarHandle alpha$VH() {
        return spng_plte_entry.alpha$VH;
    }
    public static byte alpha$get(MemorySegment seg) {
        return (byte)spng_plte_entry.alpha$VH.get(seg);
    }
    public static void alpha$set( MemorySegment seg, byte x) {
        spng_plte_entry.alpha$VH.set(seg, x);
    }
    public static byte alpha$get(MemorySegment seg, long index) {
        return (byte)spng_plte_entry.alpha$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void alpha$set(MemorySegment seg, long index, byte x) {
        spng_plte_entry.alpha$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


