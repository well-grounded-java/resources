// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_text {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(80, C_CHAR).withName("keyword"),
        C_INT.withName("type"),
        MemoryLayout.paddingLayout(32),
        C_LONG.withName("length"),
        C_POINTER.withName("text"),
        C_CHAR.withName("compression_flag"),
        C_CHAR.withName("compression_method"),
        MemoryLayout.paddingLayout(48),
        C_POINTER.withName("language_tag"),
        C_POINTER.withName("translated_keyword")
    ).withName("spng_text");
    public static MemoryLayout $LAYOUT() {
        return spng_text.$struct$LAYOUT;
    }
    public static MemorySegment keyword$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return spng_text.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)spng_text.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        spng_text.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)spng_text.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        spng_text.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return spng_text.length$VH;
    }
    public static long length$get(MemorySegment seg) {
        return (long)spng_text.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, long x) {
        spng_text.length$VH.set(seg, x);
    }
    public static long length$get(MemorySegment seg, long index) {
        return (long)spng_text.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, long x) {
        spng_text.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle text$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("text")));
    public static VarHandle text$VH() {
        return spng_text.text$VH;
    }
    public static MemoryAddress text$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)spng_text.text$VH.get(seg);
    }
    public static void text$set( MemorySegment seg, MemoryAddress x) {
        spng_text.text$VH.set(seg, x);
    }
    public static MemoryAddress text$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)spng_text.text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
        spng_text.text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle compression_flag$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("compression_flag"));
    public static VarHandle compression_flag$VH() {
        return spng_text.compression_flag$VH;
    }
    public static byte compression_flag$get(MemorySegment seg) {
        return (byte)spng_text.compression_flag$VH.get(seg);
    }
    public static void compression_flag$set( MemorySegment seg, byte x) {
        spng_text.compression_flag$VH.set(seg, x);
    }
    public static byte compression_flag$get(MemorySegment seg, long index) {
        return (byte)spng_text.compression_flag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compression_flag$set(MemorySegment seg, long index, byte x) {
        spng_text.compression_flag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle compression_method$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("compression_method"));
    public static VarHandle compression_method$VH() {
        return spng_text.compression_method$VH;
    }
    public static byte compression_method$get(MemorySegment seg) {
        return (byte)spng_text.compression_method$VH.get(seg);
    }
    public static void compression_method$set( MemorySegment seg, byte x) {
        spng_text.compression_method$VH.set(seg, x);
    }
    public static byte compression_method$get(MemorySegment seg, long index) {
        return (byte)spng_text.compression_method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compression_method$set(MemorySegment seg, long index, byte x) {
        spng_text.compression_method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle language_tag$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("language_tag")));
    public static VarHandle language_tag$VH() {
        return spng_text.language_tag$VH;
    }
    public static MemoryAddress language_tag$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)spng_text.language_tag$VH.get(seg);
    }
    public static void language_tag$set( MemorySegment seg, MemoryAddress x) {
        spng_text.language_tag$VH.set(seg, x);
    }
    public static MemoryAddress language_tag$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)spng_text.language_tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void language_tag$set(MemorySegment seg, long index, MemoryAddress x) {
        spng_text.language_tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle translated_keyword$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("translated_keyword")));
    public static VarHandle translated_keyword$VH() {
        return spng_text.translated_keyword$VH;
    }
    public static MemoryAddress translated_keyword$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)spng_text.translated_keyword$VH.get(seg);
    }
    public static void translated_keyword$set( MemorySegment seg, MemoryAddress x) {
        spng_text.translated_keyword$VH.set(seg, x);
    }
    public static MemoryAddress translated_keyword$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)spng_text.translated_keyword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void translated_keyword$set(MemorySegment seg, long index, MemoryAddress x) {
        spng_text.translated_keyword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


