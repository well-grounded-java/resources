// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class __darwin_i386_exception_state {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("__trapno"),
        C_SHORT.withName("__cpu"),
        C_INT.withName("__err"),
        C_INT.withName("__faultvaddr")
    ).withName("__darwin_i386_exception_state");
    public static MemoryLayout $LAYOUT() {
        return __darwin_i386_exception_state.$struct$LAYOUT;
    }
    static final VarHandle __trapno$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("__trapno"));
    public static VarHandle __trapno$VH() {
        return __darwin_i386_exception_state.__trapno$VH;
    }
    public static short __trapno$get(MemorySegment seg) {
        return (short)__darwin_i386_exception_state.__trapno$VH.get(seg);
    }
    public static void __trapno$set( MemorySegment seg, short x) {
        __darwin_i386_exception_state.__trapno$VH.set(seg, x);
    }
    public static short __trapno$get(MemorySegment seg, long index) {
        return (short)__darwin_i386_exception_state.__trapno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __trapno$set(MemorySegment seg, long index, short x) {
        __darwin_i386_exception_state.__trapno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __cpu$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("__cpu"));
    public static VarHandle __cpu$VH() {
        return __darwin_i386_exception_state.__cpu$VH;
    }
    public static short __cpu$get(MemorySegment seg) {
        return (short)__darwin_i386_exception_state.__cpu$VH.get(seg);
    }
    public static void __cpu$set( MemorySegment seg, short x) {
        __darwin_i386_exception_state.__cpu$VH.set(seg, x);
    }
    public static short __cpu$get(MemorySegment seg, long index) {
        return (short)__darwin_i386_exception_state.__cpu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __cpu$set(MemorySegment seg, long index, short x) {
        __darwin_i386_exception_state.__cpu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __err$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__err"));
    public static VarHandle __err$VH() {
        return __darwin_i386_exception_state.__err$VH;
    }
    public static int __err$get(MemorySegment seg) {
        return (int)__darwin_i386_exception_state.__err$VH.get(seg);
    }
    public static void __err$set( MemorySegment seg, int x) {
        __darwin_i386_exception_state.__err$VH.set(seg, x);
    }
    public static int __err$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_exception_state.__err$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __err$set(MemorySegment seg, long index, int x) {
        __darwin_i386_exception_state.__err$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __faultvaddr$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("__faultvaddr"));
    public static VarHandle __faultvaddr$VH() {
        return __darwin_i386_exception_state.__faultvaddr$VH;
    }
    public static int __faultvaddr$get(MemorySegment seg) {
        return (int)__darwin_i386_exception_state.__faultvaddr$VH.get(seg);
    }
    public static void __faultvaddr$set( MemorySegment seg, int x) {
        __darwin_i386_exception_state.__faultvaddr$VH.set(seg, x);
    }
    public static int __faultvaddr$get(MemorySegment seg, long index) {
        return (int)__darwin_i386_exception_state.__faultvaddr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __faultvaddr$set(MemorySegment seg, long index, int x) {
        __darwin_i386_exception_state.__faultvaddr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


