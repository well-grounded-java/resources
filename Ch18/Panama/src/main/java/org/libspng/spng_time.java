// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_time {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("year"),
        C_CHAR.withName("month"),
        C_CHAR.withName("day"),
        C_CHAR.withName("hour"),
        C_CHAR.withName("minute"),
        C_CHAR.withName("second"),
        MemoryLayout.paddingLayout(8)
    ).withName("spng_time");
    public static MemoryLayout $LAYOUT() {
        return spng_time.$struct$LAYOUT;
    }
    static final VarHandle year$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("year"));
    public static VarHandle year$VH() {
        return spng_time.year$VH;
    }
    public static short year$get(MemorySegment seg) {
        return (short)spng_time.year$VH.get(seg);
    }
    public static void year$set( MemorySegment seg, short x) {
        spng_time.year$VH.set(seg, x);
    }
    public static short year$get(MemorySegment seg, long index) {
        return (short)spng_time.year$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void year$set(MemorySegment seg, long index, short x) {
        spng_time.year$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle month$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("month"));
    public static VarHandle month$VH() {
        return spng_time.month$VH;
    }
    public static byte month$get(MemorySegment seg) {
        return (byte)spng_time.month$VH.get(seg);
    }
    public static void month$set( MemorySegment seg, byte x) {
        spng_time.month$VH.set(seg, x);
    }
    public static byte month$get(MemorySegment seg, long index) {
        return (byte)spng_time.month$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void month$set(MemorySegment seg, long index, byte x) {
        spng_time.month$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle day$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("day"));
    public static VarHandle day$VH() {
        return spng_time.day$VH;
    }
    public static byte day$get(MemorySegment seg) {
        return (byte)spng_time.day$VH.get(seg);
    }
    public static void day$set( MemorySegment seg, byte x) {
        spng_time.day$VH.set(seg, x);
    }
    public static byte day$get(MemorySegment seg, long index) {
        return (byte)spng_time.day$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void day$set(MemorySegment seg, long index, byte x) {
        spng_time.day$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hour$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("hour"));
    public static VarHandle hour$VH() {
        return spng_time.hour$VH;
    }
    public static byte hour$get(MemorySegment seg) {
        return (byte)spng_time.hour$VH.get(seg);
    }
    public static void hour$set( MemorySegment seg, byte x) {
        spng_time.hour$VH.set(seg, x);
    }
    public static byte hour$get(MemorySegment seg, long index) {
        return (byte)spng_time.hour$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hour$set(MemorySegment seg, long index, byte x) {
        spng_time.hour$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle minute$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("minute"));
    public static VarHandle minute$VH() {
        return spng_time.minute$VH;
    }
    public static byte minute$get(MemorySegment seg) {
        return (byte)spng_time.minute$VH.get(seg);
    }
    public static void minute$set( MemorySegment seg, byte x) {
        spng_time.minute$VH.set(seg, x);
    }
    public static byte minute$get(MemorySegment seg, long index) {
        return (byte)spng_time.minute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void minute$set(MemorySegment seg, long index, byte x) {
        spng_time.minute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle second$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("second"));
    public static VarHandle second$VH() {
        return spng_time.second$VH;
    }
    public static byte second$get(MemorySegment seg) {
        return (byte)spng_time.second$VH.get(seg);
    }
    public static void second$set( MemorySegment seg, byte x) {
        spng_time.second$VH.set(seg, x);
    }
    public static byte second$get(MemorySegment seg, long index) {
        return (byte)spng_time.second$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void second$set(MemorySegment seg, long index, byte x) {
        spng_time.second$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


