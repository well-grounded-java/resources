// Generated by jextract

package org.libspng;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class spng_row_info {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("scanline_idx"),
        C_INT.withName("row_num"),
        C_INT.withName("pass"),
        C_CHAR.withName("filter"),
        MemoryLayout.paddingLayout(24)
    ).withName("spng_row_info");
    public static MemoryLayout $LAYOUT() {
        return spng_row_info.$struct$LAYOUT;
    }
    static final VarHandle scanline_idx$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("scanline_idx"));
    public static VarHandle scanline_idx$VH() {
        return spng_row_info.scanline_idx$VH;
    }
    public static int scanline_idx$get(MemorySegment seg) {
        return (int)spng_row_info.scanline_idx$VH.get(seg);
    }
    public static void scanline_idx$set( MemorySegment seg, int x) {
        spng_row_info.scanline_idx$VH.set(seg, x);
    }
    public static int scanline_idx$get(MemorySegment seg, long index) {
        return (int)spng_row_info.scanline_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scanline_idx$set(MemorySegment seg, long index, int x) {
        spng_row_info.scanline_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle row_num$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("row_num"));
    public static VarHandle row_num$VH() {
        return spng_row_info.row_num$VH;
    }
    public static int row_num$get(MemorySegment seg) {
        return (int)spng_row_info.row_num$VH.get(seg);
    }
    public static void row_num$set( MemorySegment seg, int x) {
        spng_row_info.row_num$VH.set(seg, x);
    }
    public static int row_num$get(MemorySegment seg, long index) {
        return (int)spng_row_info.row_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row_num$set(MemorySegment seg, long index, int x) {
        spng_row_info.row_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pass$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("pass"));
    public static VarHandle pass$VH() {
        return spng_row_info.pass$VH;
    }
    public static int pass$get(MemorySegment seg) {
        return (int)spng_row_info.pass$VH.get(seg);
    }
    public static void pass$set( MemorySegment seg, int x) {
        spng_row_info.pass$VH.set(seg, x);
    }
    public static int pass$get(MemorySegment seg, long index) {
        return (int)spng_row_info.pass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pass$set(MemorySegment seg, long index, int x) {
        spng_row_info.pass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filter$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("filter"));
    public static VarHandle filter$VH() {
        return spng_row_info.filter$VH;
    }
    public static byte filter$get(MemorySegment seg) {
        return (byte)spng_row_info.filter$VH.get(seg);
    }
    public static void filter$set( MemorySegment seg, byte x) {
        spng_row_info.filter$VH.set(seg, x);
    }
    public static byte filter$get(MemorySegment seg, long index) {
        return (byte)spng_row_info.filter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filter$set(MemorySegment seg, long index, byte x) {
        spng_row_info.filter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


